
--Services

repeat task.wait() until game:IsLoaded() and game:GetService("ReplicatedStorage"):FindFirstChild("ClientModules") and game:GetService("ReplicatedStorage").ClientModules:FindFirstChild("Core") and game:GetService("ReplicatedStorage").ClientModules.Core:FindFirstChild("UIManager") and game:GetService("ReplicatedStorage").ClientModules.Core:FindFirstChild("UIManager").Apps:FindFirstChild("TransitionsApp") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TransitionsApp") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TransitionsApp"):FindFirstChild("Whiteout")



-- for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.UIManager.Apps.PlayerNameApp)) do 
--     if type(v) == "function" then 
--         local old; old = hookfunction(v, function(...)
--             local args = {...}
--             return pcall(function() old(unpack(args)) end)
--         end)
--     end 
-- end 
-- for i,v in pairs(require(game.ReplicatedStorage.ClientModules.CharacterHider)) do 
--     if type(v) == "function" then 
--        local old; old = hookfunction(v, function(...)
--         local args = {...}
--         return pcall(function() old(unpack(args)) end)
--        end)
--     end 
-- end 

getgenv().firesignal = function(signal, ...)
	local connections = getconnections(signal)
	for _, connection in ipairs(connections) do
		connection:Fire(...)
	end
end

getgenv().firetouchinterest = function(a, b, mode)
    if mode == 0 then
        for _,v in pairs(getconnections(b.Touched)) do
            v.Function(a);
        end
    end
end


local oldWarn = warn -- Store the original warn function

warn = function(...)
    Data = table.concat({...}, " ") -- Concatenate arguments into a single string
    if data == "Tested pet entity pathfinding for a path that is too far away from its target!" then 
        return 
    end
    if data == "Tested pet entity pathfinding for a path that is too far away from its target!" or
       data == "[Pathfinder] Pathfinder Failed:" or
       data:match("AccurateTime sync inaccuracy, varianc") or
       data == "[AvatarEditorFocusSwitcher] Player's Character is nil" or
       data:match("[CharacterHider]") or
       data:match("Player:Move") or
       data:match("Notch") then
        return
    end

    return oldWarn(...)
end
healedTimes = 0
gameIsloaded = false 
local initTime = tick()
local httprequest = (syn and syn.request) or http and http.request or http_request or (fluxus and fluxus.request) or request
local httpservice = game:GetService('HttpService')
local get_thread_context = get_thread_context or getthreadcontext or getidentity or syn.get_thread_identity
local get_thread_identity = get_thread_context
local set_thread_context = set_thread_context or setthreadcontext or setidentity or syn.set_thread_identity
local set_thread_identity = set_thread_context
local HiddenProps = sethiddenproperty or set_hidden_property or sethiddenprop or setscriptable and function(loc,prop,val) if not loc then return true end end
local PS = game:GetService("Players")
local RS = game:GetService("ReplicatedStorage")
local WindowFocused = false 

local UIS = game:GetService("UserInputService")

UIS.WindowFocusReleased:Connect(function()
    WindowFocused = false 
end)

UIS.WindowFocused:Connect(function()
    WindowFocused = true 
end)

require(RS.ClientModules.Core.UIManager.Apps.TransitionsApp).transition = function() return end 
require(RS.ClientModules.Core.UIManager.Apps.TransitionsApp).sudden_fill = function() return end

if PS.LocalPlayer.PlayerGui.TransitionsApp:FindFirstChild("Whiteout").Visible then 
    PS.LocalPlayer.PlayerGui.TransitionsApp:FindFirstChild("Whiteout").Visible = false 
end

local vu = game:GetService("VirtualUser")
	game:GetService("Players").LocalPlayer.Idled:connect(function()
	vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

function CreateTempPart()
    if workspace:FindFirstChild("AdoptMeAssCheeks") then 
        workspace.AdoptMeAssCheeks:Destroy() 
    end
    if PS.LocalPlayer.Character and PS.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then  
        PS.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored = true  
        local a = Instance.new("Part", workspace)
        a.Size = Vector3.new(500,0,500)
        a.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, -2, 0)
        a.CanCollide = true 
        a.Anchored = true 
        a.Transparency = 1 
        a.Name = "AdoptMeAssCheeks"
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = a.CFrame + Vector3.new(0, 1, 0)
        PS.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored = false 
    end
end




for _,v in pairs(game:GetService("ReplicatedStorage").ClientPackages["_Index"].PerformanceLogger:GetChildren()) do 
    if v:IsA("ModuleScript") and v.Name ~= "PerformanceLogger" and v.Name ~= "Dependencies" then 
        for d,Data in pairs(require(v)) do 
            if type(Data) == "function" then 
                Data = function() return end 
            end
        end
    elseif v:IsA("ModuleScript") and v.Name == "PerformanceLogger" then 
           require(v).clientPlayerLogger = function() return end 
           require(v).serverPlayerLogger = function() return end 
           for d,Data in pairs(v:GetChildren()) do 
               if Data:IsA("ModuleScript") and Data.Name ~= "Stats" and Data.Name ~= "Class" then 
                  for Fuck,Adopt in pairs(require(Data)) do 
                      if type(Adopt) == "function" then 
                         Adopt = function() return end 
                        end
                    end
               elseif Data:IsA("ModuleScript") and Data.Name == "Stats" then 
                    for d,Data in pairs(Data:GetChildren()) do 
                        if Data:IsA("ModuleScript") then 
                            for Fuck,Adopt in pairs(require(Data)) do 
                            if type(Adopt) == "function" then 
                                Adopt = function() return end 
                            end
                        end
                    end
                end
            end
        end
    end
end
for d,Data in pairs(game:GetService("ReplicatedStorage").ClientServices.First:GetChildren()) do 
    if Data:IsA("ModuleScript") then 
        for Fuck,Adopt in pairs(require(Data)) do 
            if type(Adopt) == "function" then 
                Adopt = function() return end 
            end
        end
    end
end





local Library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/Eazvy/Eazvy-Hub/main/Content/UILibrary.lua')))()


local Window = Library:MakeWindow({
    Name = "Adopt Me - Eazvy Hub",
    HidePremium = false, 
    SaveConfig = false, 
    ConfigFolder = "EazvyHub",
    IntroEnabled = false,
    IntroText = "Eazvy Hub - Adopt Me",
    IntroIcon = "rbxassetid://9421679578",
    Icon = "rbxassetid://5317266839",
})


local Main = Window:MakeTab({
	Name = "Main",
	Icon = "rbxassetid://10507357657",
	PremiumOnly = false
})

--Var + Tables

local PetSelection = {} 
getgenv().EasySettings = {
    ApplySettings = false,
    ApplyID = "",
    Eazvy_Users = {
        ['UWPConfig'] = {
            Autofarm = false, 
            BabyFarm = false, 
            TeleportMethod = "No Teleport",
            FPSCap = 60,
            AutoHeal = false,
            RainbowChar = false,
            Unhide = false,
            TradeAll = false,
            AutoOpenGifts = false,
            RainbowHouse = false,
            RainbowFurniture = false,
            AutoFuse = false,
            FarmAllPets = false, 
            FlySpeed = 50,
            BabyFarming = false, 
            EventFarm = false,
            StartingSoon = false,
            FarmSelected = false,
            ExcludeEggs = false,
            DisplayStatusOnPet = false,
            AutoSwitch = false, 
            AutoBuyEggs = false,
            AutoBuyFood = false,
            AutoBuyGifts = false,
            AutoFullGrown = false,
            AutoUseAgePotion = false,
            AutoUseNew = false,
            BoostPerformance = false,
            MaxPerformance = false,
            AutoClose = false,
            RainbowPet = false,
            FuseProtection = false,
            LoadedOnce = false,
            ChatLogger = false,
            Pickup = false,
            Fly = false,
            AutoQuests = false,
            AntiPickup = false,
            AutoRewards = false,
            UseSamePet = false,
            NeonColor = 0,0,0,
            GameUIColor = 0,0,0,
            Pet = "",
            PetName = "",
            SelectedPet = "None",
            SelectedEgg = "None",
            SelectedGift = "None",
            SelectedToy = "None",
            SelectedFilter = "None",
            SelectedVehicle = "None",
            SelectedStroller = "None",
            SelectedFood = "None",
            SelectedPotion = "None",
            SelectedLocation = "None",
            SelectedStand = "None",
            SelectedFurniture = "None",
            SelectedRobuxPet = "None",
            PetAccessory = "None",
            PetSelected = "None",
            Furniture = "None",
            PlayerName = "None",
            Pet_Name = "None",
            SendFull=false,
            SendFuse=false,
            SendEarned=false, 
            WebhookEnabled = false,
            WebhookDelay = 15,
            DefaultKeybind = Enum.KeyCode.LeftAlt,
            Webhook = "None",
            TimeElapsed = 0
        },
    },
}

if makefolder then 
    makefolder("Eazvy-Hub")
end



if not isfile("Eazvy-Hub/KIDNAP_ME_920587237_Settings.txt") and writefile then 
    writefile('Eazvy-Hub/KIDNAP_ME_920587237_Settings.txt', game:GetService('HttpService'):JSONEncode(getgenv().EasySettings))
end


function UpdateFile()
    writefile('Eazvy-Hub/KIDNAP_ME_920587237_Settings.txt', game:GetService('HttpService'):JSONEncode(getgenv().EasySettings))
end


if isfile("Eazvy-Hub/KIDNAP_ME_920587237_Settings.txt") then
    getgenv().EasySettings = game:GetService('HttpService'):JSONDecode(readfile('Eazvy-Hub/KIDNAP_ME_920587237_Settings.txt'))
    writefile('Eazvy-Hub/KIDNAP_ME_920587237_Settings.txt', game:GetService('HttpService'):JSONEncode(getgenv().EasySettings))
end

for i,v in pairs(debug.getupvalue(require(RS.Fsys).load("RouterClient").init, 4)) do
    v.Name = i
end


local Found 
for i,v in pairs(getgenv().EasySettings.Eazvy_Users) do 
    for x,d in pairs(v) do
        if tostring(x) == 'UWPConfig' then 
            Found = true 
        end
    end
end

if not Found then 
    local shit = { 
     ['UWPConfig'] = {
        Autofarm = false, 
        BabyFarm = false, 
        AutoOpenGifts = false,
        RainbowHouse = false,
        AutoFuse = false,
        FarmAllPets = false, 
        BabyFarming = false, 
        EventFarm = false,
        FarmSelected = false,
        ExcludeEggs = false,
        AutoSwitch = false, 
        AutoBuyEggs = false,
        AutoBuyFood = false,
        AutoBuyGifts = false,
        AutoFullGrown = false,
        BoostPerformance = false,
        FuseProtection = false,
        LoadedOnce = false
     },
 }
 table.insert(getgenv().EasySettings.Eazvy_Users, shit)
end
-- UpdateFile()

local MainSettings = getgenv().EasySettings
local Settings
local ConfigFile = getgenv().EasySettings.Eazvy_Users or {}
for i,v in pairs(ConfigFile) do 
    for x,d in pairs(v) do
        if tostring(x) == 'UWPConfig' then 
            Settings = d
        end
    end
end
if Settings.MaxPerformance then 
    for i,v in pairs(game:GetService("ReplicatedStorage").ClientServices:GetDescendants()) do 
        if v:IsA("ModuleScript") and require(v) and require(v).init and v.Name ~= "DoorsClient" and v.Name ~= "ResetHandler" then 
           require(v).init = function() return end 
        end 
    end 
    for i,v in pairs(require(game:GetService("ReplicatedStorage").ClientModules.Core.WeatherClient.WeatherClient)) do 
        if type(v) == "function" then 
        v = function() return end 
        end
    end   
    for i,v in pairs(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetPerformancesFolder.Emotes:GetChildren()) do 
        if v:IsA("ModuleScript") then 
            require(v).step = function() return end 
        end
    end    
    for i,v in pairs(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetReactions:GetChildren()) do 
        require(v).init_reaction = function() return end 
    end  
    for i,v in pairs(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetPerformancesFolder.Transitions:GetChildren()) do 
        if v:IsA("ModuleScript") then 
            require(v).step = function() return end 
        end
    end   
    for Data,Effect in pairs(require(game:GetService("ReplicatedStorage").ClientModules.Core.UIManager.Apps.SpecialEffectsApp)) do 
        if type(Data) == "function" then 
            Data = function() return end 
        end
    end
end

-- if EAZVY_LOADED  then 
--     local CloneSettings = Settings
--     for i,v in pairs(Settings) do 
--         if v == true then 
--            v = false 
--         end 
--     end 
--     Settings = CloneSettings
--     Library:MakeNotification({
--         Name = "Eazvy Hub - Error",
--         Content = "Script has already been loaded; Your config will be saved... Please wait:",
        -- Image = "rbxassetid://161551681",
--         Time = 5
--     })
-- end

if not Settings.LoadedOnce then 
    Settings.LoadedOnce = true 
    UpdateFile()
end



local c;
local h;
local bv;
local bav;
local cam;
local flying;
local p = Client;
local buttons = {W = false, S = false, A = false, D = false, Moving = false};

local StartFly = function ()
    if not game:GetService("Players").LocalPlayer.Character or not game:GetService("Players").LocalPlayer.Character.Head or flying then return end;
    c = game:GetService("Players").LocalPlayer.Character;
    h = game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid");
    h.PlatformStand = true;
    cam = workspace:WaitForChild('Camera');
    bv = Instance.new("BodyVelocity");
    bav = Instance.new("BodyAngularVelocity");
    bv.Velocity, bv.MaxForce, bv.P = Vector3.new(0, 0, 0), Vector3.new(10000, 10000, 10000), 1000;
    bav.AngularVelocity, bav.MaxTorque, bav.P = Vector3.new(0, 0, 0), Vector3.new(10000, 10000, 10000), 1000;
    bv.Parent = c.Head;
    bav.Parent = c.Head;
    flying = true;
    h.Died:connect(function() flying = false end);
end;

local EndFly = function ()
    if not game:GetService("Players").LocalPlayer.Character or not flying then return end
    game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false;
    bv:Destroy();
    bav:Destroy();
    flying = false;
end;


game:GetService("UserInputService").InputBegan:connect(function (input, GPE) 
    if GPE then return end;
    for i, e in pairs(buttons) do
        if i ~= "Moving" and input.KeyCode == Enum.KeyCode[i] then
            buttons[i] = true;
            buttons.Moving = true;
        end;
    end;
end);

game:GetService("UserInputService").InputEnded:connect(function (input, GPE) 
    if GPE then return end;
    local a = false;
    for i, e in pairs(buttons) do
        if i ~= "Moving" then
            if input.KeyCode == Enum.KeyCode[i] then
                buttons[i] = false;
            end;
            if buttons[i] then a = true end;
        end;
    end;
    buttons.Moving = a;
end);


local setVec = function (vec)
    return vec * ((Settings.FlySpeed or 50) / vec.Magnitude);
end;

game:GetService("RunService").Heartbeat:connect(function (step) -- The actual fly function, called every frame
    if flying and c and c.PrimaryPart then
        local p = c.PrimaryPart.Position;
        local cf = cam.CFrame;
        local ax, ay, az = cf:toEulerAnglesXYZ();
        c:SetPrimaryPartCFrame(CFrame.new(p.x, p.y, p.z) * CFrame.Angles(ax, ay, az));
        if buttons.Moving then
            local t = Vector3.new();
            if buttons.W then t = t + (setVec(cf.lookVector)) end;
            if buttons.S then t = t - (setVec(cf.lookVector)) end;
            if buttons.A then t = t - (setVec(cf.rightVector)) end;
            if buttons.D then t = t + (setVec(cf.rightVector)) end;
            c:TranslateBy(t * step);
        end;
    end;
end);




-- task.spawn(function()
--     repeat task.wait()
    
--     until game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("AssetLoadUI") and not game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("AssetLoadUI").Enabled
    
--     repeat task.wait()
--         if game:GetService("Players").LocalPlayer.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.Visible then
--             firesignal(game:GetService("Players").LocalPlayer.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.MouseButton1Click)
--             firesignal(game:GetService("Players").LocalPlayer.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.MouseButton1Down)
--             firesignal(game:GetService("Players").LocalPlayer.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.Activated)
--         end
--     until not game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("NewsApp").Enabled or game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("NewsApp") and game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.Visible and game:IsLoaded()
    
    -- if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RoleChooserDialog.ChooseParent.Visible then
    --     firesignal(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RoleChooserDialog.ChooseParent.MouseButton1Click)
    --     firesignal(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RoleChooserDialog.ChooseParent.MouseButton1Down)
    --     firesignal(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RoleChooserDialog.ChooseParent.Activated)
    -- end
-- end)
-- Check 2



repeat
    if game:GetService("Players").LocalPlayer.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.Visible then
        firesignal(game:GetService("Players").LocalPlayer.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.MouseButton1Click)
        firesignal(game:GetService("Players").LocalPlayer.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.MouseButton1Down)
        firesignal(game:GetService("Players").LocalPlayer.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.Activated)
    end
    if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RoleChooserDialog.ChooseParent.Visible then
        firesignal(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RoleChooserDialog.ChooseParent.MouseButton1Click)
        firesignal(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RoleChooserDialog.ChooseParent.MouseButton1Down)
        firesignal(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RoleChooserDialog.ChooseParent.Activated)
    end
    task.wait(1.1)
until game:GetService("Players").LocalPlayer.Character and workspace.Camera.CameraSubject == game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid")


task.spawn(function()
    repeat task.wait() until game:IsLoaded() and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    task.wait(2.1)
    game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog:WaitForChild("RobuxProductDialog")
    if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Buttons:GetChildren()) do 
            if v.ClassName == "ImageButton" then 
                firesignal(v.MouseButton1Click)
                firesignal(v.MouseButton1Down)
                firesignal(v.Activated)
            end
        end
    end
    game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("DailyLoginApp")
    if game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Enabled and game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Frame.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Frame.Body.Buttons:GetChildren()) do 
            if v.Name == "ClaimButton" then
                firesignal(v.MouseButton1Click)
                firesignal(v.MouseButton1Down)
                firesignal(v.Activated)
            end 
        end
    end
    game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog:WaitForChild("UpdatesDialog")
    if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.UpdatesDialog.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.UpdatesDialog.Buttons:GetChildren()) do 
            if v.ClassName == "ImageButton" then 
                firesignal(v.MouseButton1Click)
                firesignal(v.MouseButton1Down)
                firesignal(v.Activated)
            end
        end
    end
end)

repeat task.wait() until game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid")

-- require(RS.ClientServices.First.SendClientErrorReportsToServer).init = function() return end 


local Teleports = {
    ['Main Map'] = {
        ['MainID'] = "MainMap",
        ['SecID'] = "MainDoor"
    },
    ['Main Map Desert'] = {
        ['MainID'] = "MainMap/Desert",
        ['SecID'] = "MainDoor"
    },
    ['Main Map Fall'] = {
        ['MainID'] = "MainMap/Fall",
        ['SecID'] = "MainDoor"
    },
    ['Main Map Snow'] = {
        ['MainID'] = "MainMap/Snow",
        ['SecID'] = "MainDoor"
    },
    ['Desert Shop'] = {
        ['MainID'] = "DesertShop",
        ['SecID'] = "MainDoor"
    },
    ['Salon'] = {
        ['MainID'] = "Salon",
        ['SecID'] = "MainDoor"
    },
    ["Neighborhood Desert"] = {
      ['MainID'] = "Neighborhood/Desert",
      ['SecID'] = "MainDoor"
    },
    ["Neighborhood Fall"] = {
        ['MainID'] = "Neighborhood/Fall",
        ['SecID'] = "MainDoor"
    },
    ['Neighborhood Snow'] = {
        ['MainID'] = "Neighborhood/Snow",
        ['SecID'] = "MainDoor"
    },
    ['Debug Interior'] = {
        ['MainID'] = "DebugInterior",
        ['SecID'] = ""
    },
    ['Coffee Shop'] = {
       ['MainID'] = "CoffeeShop",
       ['SecID'] = "MainDoor"
    },
    ['Farm Shop'] = {
        ['MainID'] = "FarmShop",
        ['SecID'] = "MainDoorFarmShop"
    },
    ['Obbies'] = {
        ['MainID'] = "Obbies",
        ['SecID'] = "MainDoorObbies"
    },
    ['Neighborhood'] = {
        ['MainID'] = "Neighborhood",
        ['SecID'] = "MainDoorNeighborhood"
    },
    ['Pet Shop'] = {
        ['MainID'] = "PetShop",
        ['SecID'] = "MainDoorPetShop"
    },
    ['Nursery'] = {
        ['MainID'] = "Nursery",
        ['SecID'] = "MainDoorNursery"
    },
    ['Cave'] = {
        ['MainID'] = "Cave",
        ['SecID'] = "MainDoorCave"
    },
    ['Ice Cream'] = {
        ['MainID'] = "IceCream",
        ['SecID'] = "MainDoorIceCream"
    },
    ['Fall Shop'] = {
        ['MainID'] = "FallShop",
        ['SecID'] = "MainDoor"
    },
    ['Snow Shop'] = {
        ['MainID'] = "SnowShop",
        ['SecID'] = "MainDoor"
    },
    ['Wing Room'] = {
        ['MainID'] = "WingRoom",
        ['SecID'] = "Interior"
    },
    ['Safety Hub'] = {
        ['MainID'] = "SafetyHub",
        ['SecID'] = "MainDoorSafetyHub"
    },
    ['Sky Castle'] = {
        ['MainID'] = "SkyCastle",
        ['SecID'] = "MainDoorSkyCastle"
    },
    ['Baby Shop'] = {
        ['MainID'] = "BabyShop",
        ['SecID'] = "MainDoorBabyShop"
    },
    ['Hat Shop'] = {
        ['MainID'] = "HatShop",
        ['SecID'] = "MainDoorHatShop"
    },
    ['Hospital'] = {
        ['MainID'] = "Hospital",
        ['SecID'] = "MainDoorHospital"
    },
    ['Auto Shop'] = {
        ['MainID'] = "AutoShop",
        ['SecID'] = "MainDoorAutoShop"
    },
    ['Toy Shop'] = {
        ['MainID'] = "ToyShop",
        ['SecID'] = "MainDoorToyShop"
    },
    ['Camping Shop'] = {
        ['MainID'] = "CampingShop",
        ['SecID'] = "MainDoorCampingShop"
    },
    ['Pizza Shop'] = {
        ['MainID'] = "PizzaShop",
        ['SecID'] = "MainDoorPizzaShop"
    },
    ['School'] = {
        ['MainID'] = "School",
        ['SecID'] = "MainDoorSchool"
    },
    ['VIP'] = {
        ['MainID'] = "VIP",
        ['SecID'] = "Interior"
    },
    ['Clothing Shop'] = {
        ['MainID'] = "ClothingShop",
        ['SecID'] = "MainDoor"
    }
    -- ['Monkey Fairground'] = {
    --     ['MainID'] = "MonkeyFairground",
    --     ['SecID'] = "MainDoor"
    -- }
}


local MapLocations = {"housing/space_house","housing/castle_house","housing/luxury_house","housing","housing/vip_house","HotSpringHouse","MainMap","MainMap/Default","MainMap/Desert","MainMap/Fall","MainMap/Snow","Neighborhood/Default","Neighborhood/Desert","Neighborhood/Fall","Neighborhood/Halloween","Neighborhood/Snow","IceCream"}
local Saving = {}

for Map,Maps in pairs(require(game:GetService("ReplicatedStorage").ClientDB.InteriorsDB)) do 
    if Maps.interactions and not table.find(MapLocations, Map) and not Map:match("preview") then 
        function capitalizeEveryWord(inputString)
            local result = inputString:gsub("%w+", function(word)
                return word:sub(1, 1):upper() .. word:sub(2)
            end)
            return result
        end     
        local XD = string.gsub(capitalizeEveryWord(Map), "Shop", " Shop")
        XD = string.gsub(XD, "Interior", " Interior")
        XD = string.gsub(XD, "Room", " Interior")
        XD = string.gsub(XD, "FireDimension", "Fire Dimension")
        XD = string.gsub(XD, "CastleCrashed", "Castle Crashed")
        XD = string.gsub(XD, "CrashedSky", "Crashed Sky")
        XD = string.gsub(XD, "hoodRain", "hood Rain")
        XD = string.gsub(XD, "Room", " Room")
        XD = string.gsub(XD, "housing/", "Housing")
        XD = string.gsub(XD, "castle", "Castle")
        XD = string.gsub(XD, "Hub", " Hub")
        XD = string.gsub(XD, "Minigame", " Minigame")
        XD = string.gsub(XD, "IceCream", "Ice Cream")
        XD = string.gsub(XD, "IceCream ", "Ice Cream ")
        XD = string.gsub(XD, "Frenzy", " Frenzy")
        XD = string.gsub(XD, "MainMap/", "Main Map ")
        XD = string.gsub(XD, "Vip", "VIP")
        XD = string.gsub(XD, "/", "")
        XD = string.gsub(XD, "Neighborhood/", "Neighborhood ")
        XD = string.gsub(XD, "Rain", "Rain ")
        XD = string.gsub(XD, "TradeLicenseZone", "Trade License Zone")
        XD = string.gsub(XD, "AprilFools", "April Fools ")
        if not string.lower(Map):match("castle ") and not string.lower(Map):match(" castle") then 
            XD = string.gsub(XD, "Castle", " Castle")
        end 
        if not string.lower(Map):match("housing ") and not string.lower(Map):match(" housing") then 
            XD = string.gsub(XD, "Housing", "Housing ")
        end 
        if not string.lower(Map):match("preview") then 
            Teleports[tostring(tostring(string.gsub(string.gsub(string.gsub(tostring(string.gsub(XD,"%p_-%a",string.upper)),"%p_-%a",string.upper), "_", " "), "^%l", function(c) return string.upper(c) end)))] = {
                ['MainID'] = tostring(Map),
                ['SecID'] = "MainDoor"
            }
        else 
            Saving[tostring(tostring(string.gsub(string.gsub(string.gsub(tostring(string.gsub(XD,"%p_-%a",string.upper)),"%p_-%a",string.upper), "_", " "), "^%l", function(c) return string.upper(c) end)))] = {
                ['MainID'] = tostring(Map),
                ['SecID'] = "MainDoor"
            }
        end
    end
    for i,v in pairs(Saving) do 
        Teleports[i] = {
            ['MainID'] = v['MainID'],
            ['SecID'] = "MainDoor"
        }
    end
end


for i,v in pairs(workspace.StaticMap.TeleportLocations:GetChildren()) do 
    if v.Name ~= "FireDimension" then 
        local XD = string.gsub(v.Name, "Shop", " Shop")
        XD = string.gsub(XD, "Interior", " Interior")
        XD = string.gsub(XD, "Room", " Interior")
        XD = string.gsub(XD, "Room", " Room")
        XD = string.gsub(XD, "housing/", "Housing")
        XD = string.gsub(XD, "castle", "Castle")
        XD = string.gsub(XD, "Castle", " Castle")
        XD = string.gsub(XD, "Hub", " Hub")
        XD = string.gsub(XD, "Minigame", " Minigame ")
        XD = string.gsub(XD, "MainMap/", "Main Map ")
        XD = string.gsub(XD, "Neighborhood/", "Neighborhood ")
        XD = string.gsub(XD, "Rain", "Rain ")
        XD = string.gsub(XD, "AprilFools", "April Fools ")
        XD = string.gsub(XD, "JoinZone", "Join Zone")
        if not v.Name:match("exterior") and v.Name ~= "new_hospital" and v.Name ~= "WingRoom" and v.Name ~= "EventStandTarget" and not Teleports[tostring(tostring(string.gsub(string.gsub(string.gsub(tostring(string.gsub(XD,"%p_-%a",string.upper)),"%p_-%a",string.upper), "_", " "), "^%l", function(c) return string.upper(c) end)))]  then 
            Teleports[tostring(tostring(string.gsub(string.gsub(string.gsub(tostring(string.gsub(XD,"%p_-%a",string.upper)),"%p_-%a",string.upper), "_", " "), "^%l", function(c) return string.upper(c) end)))] = {
                ['MainID'] = "MainMap",
                ['SecID'] = "MainDoor",
                ['ThirID'] = v.CFrame
            } 
        end 
    end
end

local Fsys = require(RS:WaitForChild("Fsys")).load
local Ui_Manager = Fsys("UIManager")
local k = get_thread_identity()
set_thread_identity(4)
local Old = Ui_Manager.apps.SpeechBubbleApp.create 
Ui_Manager.apps.SpeechBubbleApp.create = function(...)
    args = {...} 
    if Settings.MaxPerformance then 
       return "daddyuwu!!2131312321312" 
    end 
    return Old(unpack(args))
 end 
 
local Old = Ui_Manager.apps.SpeechBubbleApp.create_for_character
Ui_Manager.apps.SpeechBubbleApp.create_for_character = function(...)
   args = {...} 
   if Settings.MaxPerformance then 
      return "daddyuwu!!2131312321312" 
   end 
   return Old(unpack(args))
end 
set_thread_identity(k)

Data = require(RS.ClientModules.Core.ClientData)
local Dialog = require(RS.ClientModules.Core.UIManager.UIManager)
local Shared_Consts = require(RS.ClientDB.SharedConstants)
local Social_Ailment_Durations = Shared_Consts.social_ailment_durations
local Ailment_PerFriendship = Shared_Consts.ailments_per_friendship_level
local PetProgression = require(RS.Fsys).load("PetProgressionDB")
local GrammarUtil = require(RS.Fsys).load("GrammarUtil")
local InventoryFolder = RS.ClientDB.Inventory
local TeleportModule = require(RS.ClientModules.Core.InteriorsM.InteriorsM)
local Rewards = require(RS.ClientModules.Core.UIManager.Apps.MilestoneRewardsApp)
local VehicleTable = require(InventoryFolder.InventoryTransportSubDB)
local FoodTable = require(InventoryFolder.InventoryFoodSubDB)
local ToysTable = require(InventoryFolder.InventoryToysSubDB)
local StrollerTable = require(InventoryFolder.InventoryStrollersSubDB)
-- local PetAccesories = require(InventoryFolder.InventoryPetAccessoriesSubDB)
local CurrentGifts = require(InventoryFolder.InventoryGiftsSubDB)
local ClientDat = require(RS.ClientModules.Core.ClientData)
local Main_Menu = require(RS.ClientModules.Core.UIManager.Apps.MainMenuApp)
local PizzaModule = require(RS.SharedModules.Game.PizzaShopHelper)
local FurnitureHelper =  require(RS.SharedModules.Game.FurnitureSelectorHelpers.FurnitureRegistry)
local AilmentDa = require(RS.ClientDB.AilmentsDB)
local Client_Data = require(RS.Fsys).load("ClientData")
local TeleportToPlayer = RS.API["LocationAPI/TeleToPlayer"]
local PerformingTask = false
local PerformingHalloween = false 
local Status = Main:AddParagraph("Autofarm Status:","Disabled")
local Pet_Status = Main:AddParagraph("Autofarm Information:","Disabled")
local Bucks_Earned = Main:AddParagraph("Money Status:","Bucks Earned: 0")
if not getgenv().Previous_Bux then 
   getgenv().Previous_Bux = tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get("money"))
end 
local Last_Equipped = tostring(Client_Data.get("last_equipped_pet"))
local Money_Bag = tostring(utf8.char(0x0001F4B0))
local Wheel = tostring(utf8.char(0x00002699))
local Sparkles = tostring(utf8.char(0x00002728))
local Dog = tostring(utf8.char(0x0001F415))
local Warning = tostring(utf8.char(0x0001F47A))
local Cow = tostring(utf8.char(0x0001F42E))
local EggsD = tostring(utf8.char(0x0001F95A))
local Cart = tostring(utf8.char(0x0001F6D2))
local Toy = tostring(utf8.char(0x0001F9F8))
local Notepad = tostring(utf8.char(0x0001F5D2))
local MoneyNote = tostring(utf8.char(0x0001F4B5))
local Label = tostring(utf8.char(0x0001F3F7))
local Apple = tostring(utf8.char(0x0001F34E))
local Dollar = "\240\159\146\181"
local Vehicle = tostring(utf8.char(0x0001F699))
local Potion = tostring(utf8.char(0x0001F9EA))
local Present = tostring(utf8.char(0x0001F381))
local PetHat = tostring(utf8.char(0x0001F3A9))
local Candy = tostring(utf8.char(0x0001F36C))
local Dog = tostring(utf8.char(0x0001F415))
local Chair = tostring(utf8.char(0x0001FA91))
local AltCurrencyEnabled = Shared_Consts.alt_currency_enabled or false 
local AltCurrencyName = tostring(Shared_Consts.alt_currency_name) or ""
local AltCurrencyN = tostring(Shared_Consts.alt_currency_human_readable) or ""
local Social_Ailment_Durations = Shared_Consts.social_ailment_durations
local ClaimRemote = Fsys("RouterClient").get("QuestAPI/ClaimQuest")
local RerollRemote = Fsys("RouterClient").get("QuestAPI/RerollQuest")
local NewTaskBool = true
local NewClaimBool = false 
local DailyBoolean = false 
local Pets = {}
local PetSelectionTable = {}
local BuyPets = {}
local DontOveridePets = {}
local RobuxPets = {}
local PetColors = {}
local PetAccess = {}
local Gifts = {}
local Foods = {}
local Vehicles = {}
local Strollers = {}
local Toys = {}
local Eggs = {}
local Hair_Colors = { Color3.fromRGB(13, 105, 172), Color3.fromRGB(155, 201, 220), Color3.fromRGB(110, 153, 202), Color3.fromRGB(159, 243, 233), Color3.fromRGB(116, 117, 126), Color3.fromRGB(161, 161, 161), Color3.fromRGB(98, 37, 209), Color3.fromRGB(56, 58, 67), Color3.fromRGB(218, 134, 122), Color3.fromRGB(177, 168, 153), Color3.fromRGB(245, 159, 245), Color3.fromRGB(248, 248, 248), Color3.fromRGB(117, 0, 0), Color3.fromRGB(217, 149, 66), Color3.fromRGB(255, 148, 148), Color3.fromRGB(160, 132, 79), Color3.fromRGB(161, 196, 140), Color3.fromRGB(203, 166, 91), Color3.fromRGB(239, 184, 56), Color3.fromRGB(91, 68, 49), Color3.fromRGB(255, 102, 204), Color3.fromRGB(211, 203, 88), Color3.fromRGB(255, 206, 183), Color3.fromRGB(110, 148, 67), Color3.fromRGB(16, 42, 220), Color3.fromRGB(68, 127, 37), Color3.fromRGB(90, 90, 90), Color3.fromRGB(153, 139, 126), Color3.fromRGB(220, 214, 207), Color3.fromRGB(95, 211, 95), Color3.fromRGB(168, 144, 117), Color3.fromRGB(52, 97, 28), Color3.fromRGB(30, 30, 30), Color3.fromRGB(208, 146, 183), Color3.fromRGB(203, 166, 91), Color3.fromRGB(148, 136, 214), Color3.fromRGB(245, 205, 48), Color3.fromRGB(124, 92, 70), Color3.fromRGB(173, 90, 79)}
local Potions = {}
local Furniture = {}
local AllGamepasses = {}
local CatalogItems = {}
local RainbowParts = {}
local NeonTable = {["neon_fusion"] = true, ["mega_neon_fusion"] = true}
local ClaimTable = {}
local RewardsTable = {}
local AilmentsTable = {"hungry","sleepy","thirsty","dirty","bored","salon","school","sick","pizza_party","camping","pool_party"}
if not getgenv().Previous_Currency then 
    getgenv().Previous_Currency = tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get(tostring(AltCurrencyName)))
end 
if AltCurrencyEnabled then 
    Text = "Bucks Earned: 0 | " .. tostring(AltCurrencyN) .. " Earned: 0"
else 
    Text = "Bucks Earned: 0 "
end

local SleepyReward,HungryReward,ThirstyReward,DirtyReward,SchoolReward,CampingReward,SickReward,SalonReward,PizzaPartyReward,BoredReward,
SleepyReward = AilmentDa.sleepy.reward 
HungryReward = AilmentDa.hungry.reward 
ThirstyReward = AilmentDa.thirsty.reward 
DirtyReward = AilmentDa.dirty.reward 
CampingReward = AilmentDa.camping.reward 
SickReward = AilmentDa.sick.reward 
SalonReward = AilmentDa.salon.reward 
PizzaPartyReward = AilmentDa.pizza_party.reward 
BoredReward = 18



Client_Data.get_server_latest = function() return end 

for i,v in pairs(require(game:GetService("ReplicatedStorage").ClientDB.DailyLoginDB).star_rewards) do 
    for x,d in pairs(v) do 
        if not table.find(RewardsTable, tostring(x)) then 
            RewardsTable[tostring(x)] = {d.stars}
        end
    end
end

for i,v in pairs(require(game:GetService("ReplicatedStorage").ClientDB.TaskBoard.QuestsDB)) do 
    if type(v) == "table" then 
        for x,d in pairs(v) do 
            if d.entry_name ~= "lures_2023_bait_lure" then 
               ClaimTable[tostring(d.entry_name)] = {d.total_steps}
            end
        end
    end
end

function CheckBabyTasks()
    repeat task.wait() until game:IsLoaded() and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "team") ~= "Babies" and Settings.BabyFarm and PS.LocalPlayer.Character and PS.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then 
        RS.API:FindFirstChild("TeamAPI/ChooseTeam"):InvokeServer("Babies",true)
        Settings.BabyFarming = true 
    end
    if Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "char_wrapper") and Settings.BabyFarm then 
        --RS.API:FindFirstChild("FamilyAPI/CreateFamily"):InvokeServer()
        local Check = Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "char_wrapper")
        if Check.ailments_monitor and Check.ailments_monitor.ailments and Settings.BabyFarm then 
            for _,v in pairs(Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "char_wrapper").ailments_monitor.ailments) do 
                for x,d in pairs(v) do 
                    if Settings.BabyFarm and table.find(AilmentsTable, tostring(d)) then 
                        RS.API["MonitorAPI/AddAdditive"]:FireServer(tostring(d),100)
                        RS.API["MonitorAPI/AddRate"]:InvokeServer(tostring(d),100) 
                        Settings.BabyFarming = true 
                    end
                end
            end
        end
    end
    Settings.BabyFarming = false 
end


local Gamepasses = require(RS.ClientDB.GamepassDB)
for Gamepass, Data in pairs(Gamepasses) do
    table.insert(AllGamepasses,Gamepass)
end
local Items = require(RS.ClientDB.UnlockableCatalogItemsDB)
for Item, Data in pairs(Items) do 
    table.insert(CatalogItems, Item)
end

local ContentPacks = game:GetService("ReplicatedStorage").SharedModules.ContentPacks
local Images = {}


Skin_Tones = {2648679719, 2648695837, 2648697082, 2648697794, 2648698393, 2648701884, 2648702966, 2648704569, 2648705765, 2648707794, 2648708844, 2648721548, 2648722445, 2648723409, 2648723983, 2648724672, 2648725137, 2648725804, 2648726459, 2648727084, 2648727793, 2648728347, 2648729298, 2648730022, 2648730755, 2648731350, 2648731978, 2648732567, 2648733110, 2648733811}

local k = get_thread_identity()
set_thread_identity(4)
Bucks_Earned:Set(Text)
local Labels = {Bucks_Earned, Pet_Status, Status}
for i, v in pairs(Labels) do
    local Old = v.Set 
    v.Set = function(...)
        if Settings.MaxPerformance then 
            return
        end 
        local args = {...}
        return pcall(function() Old(unpack(args)) end)
    end 
end
set_thread_identity(k)

local Locations = {}
for i,v in pairs(Teleports) do 
    table.insert(Locations, tostring(i))
end

function VerifyFood(name)
    for i,v in pairs(require(game.ReplicatedStorage.ClientDB.Inventory.InventoryFoodSubDB).entries) do 
        if i==name and v.not_for_sale then 
            return false 
        end 
    end 
    return true 
end 


function GetPetName(kind)
    for x,d in pairs(RS.SharedModules.ContentPacks:GetChildren()) do 
        if d:IsA("Folder") and d:FindFirstChild("InventorySubDB") then 
            Folder = d:FindFirstChild("InventorySubDB")
            if Folder:FindFirstChild("Pets") then 
                PetCheck = require(Folder:FindFirstChild("Pets"))[kind]
                if PetCheck then 
                    return tostring(PetCheck.name)
                end
            end
        end
    end
end




New_Data = Data.get_data()[tostring(PS.LocalPlayer)]
for i,v in pairs(New_Data.inventory.pets) do 
    if v.properties.age == 6 then 
        Kind = string.gsub(GetPetName(v.kind) or v.kind,"%p_-%a",string.upper)
        if v.properties.rp_name and v.properties.rp_name ~= "" and not table.find(Pets, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old"))) and v.kind ~= "practice_dog" then 
            table.insert(Pets, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old")))
        elseif not v.properties.rp_name and not table.find(Pets, tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. v.properties.age .. " Years Old")) and v.kind ~= "practice_dog" then
            table.insert(Pets, tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. v.properties.age .. " Years Old"))
        end
    end
end

New_Data = Data.get_data()[tostring(PS.LocalPlayer)]
for i,v in pairs(New_Data.inventory.pets) do 
    Kind = string.gsub(GetPetName(v.kind) or v.kind,"%p_-%a",string.upper)
    if v.properties.rp_name and v.properties.rp_name ~= "" and not table.find(PetSelectionTable, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old"))) and v.properties.age < 6 then 
        table.insert(PetSelectionTable, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old")))
    elseif not v.properties.rp_name and not table.find(PetSelectionTable, tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. v.properties.age .. " Years Old")) and v.properties.age < 6 then
        table.insert(PetSelectionTable, tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. v.properties.age .. " Years Old"))
    end
end


for i,v in pairs(game.ReplicatedStorage.SharedModules.ContentPacks:GetChildren()) do 
    if v:IsA("Folder") and v:FindFirstChild("InventorySubDB") then 
        local Folder = v:FindFirstChild("InventorySubDB")
        if Folder:FindFirstChild("Transport") then
           local CheckFood = require(Folder.Transport)
            for i,v in pairs(CheckFood) do 
                local FoodName = v.name  
                local Price = tostring(v.cost)
                if v.cost ~= nil and not v.not_for_sale and not v.robux and not v.name:match("Potion") and v.source_content_pack ~= "Desert2022" and v.source_content_pack ~= "Snow2022" and v.source_content_pack ~= "Fall2022" and v.source_content_pack ~= "Winter2022" then
                    table.insert(Vehicles, tostring(string.gsub(string.gsub(FoodName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price)
                end
            end
        end
    end
end


for i,v in pairs(VehicleTable.entries) do 
    local Price = tostring(v.cost)
    local VehicleName = v.name 
    if v.cost ~= nil and not v.not_for_sale then 
        table.insert(Vehicles, tostring(string.gsub(string.gsub(VehicleName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price)
    end
end



for i,v in pairs(game.ReplicatedStorage.SharedModules.ContentPacks:GetChildren()) do 
    if v:IsA("Folder") and v:FindFirstChild("InventorySubDB") then 
        local Folder = v:FindFirstChild("InventorySubDB")
        if Folder:FindFirstChild("Food") then
           local CheckFood = require(Folder.Food)
            for i,v in pairs(CheckFood) do 
                if v.cost ~= nil and not v.not_for_sale and not v.robux and not v.name:match("Potion") and v.source_content_pack ~= "Desert2022" and v.source_content_pack ~= "Snow2022" and v.source_content_pack ~= "Fall2022" and v.source_content_pack ~= "Winter2022" then 
                    local FoodName = v.name  
                    local Price = tostring(v.cost)
                    if FoodName:match("VIP") and IsVip then
                       table.insert(Foods, tostring(string.gsub(string.gsub(FoodName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price)
                    elseif not FoodName:match("VIP") then 
                        table.insert(Foods, tostring(string.gsub(string.gsub(FoodName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price)
                    end 
                elseif v.cost ~= nil and not v.not_for_sale and not v.robux then 
                    local FoodName = v.name  
                    local Price = tostring(v.cost)
                    table.insert(Potions, tostring(string.gsub(string.gsub(FoodName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price)
                end
            end 
        end
    end
end

for i,v in pairs(FoodTable.entries) do 
    local Price = tostring(v.cost)
    local FoodName = v.name or string.gsub(i,"%p_-%a",string.upper)
    if i:match("potion") and v.cost ~= nil and not v.not_for_sale and not v.robux and VerifyFood(i) and v.origin ~= "Task Board Update" and v.origin ~= "Rain" and v.origin ~= "Desert Update" and v.origin ~= "Fall Update" and v.origin ~= "Snow Update" and not table.find(Potions, tostring(string.gsub(string.gsub(FoodName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price) and not table.find(Potions, tostring(string.gsub(string.gsub(FoodName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price) then 
        table.insert(Potions, tostring(string.gsub(string.gsub(FoodName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price)
    elseif v.cost ~= nil and not v.not_for_sale and not v.robux and VerifyFood(i) and v.origin ~= "Task Board Update" and v.origin ~= "Rain" and v.origin ~= "Desert Update" and v.origin ~= "Fall Update" and v.origin ~= "Snow Update"and not table.find(Potions, tostring(string.gsub(string.gsub(FoodName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price) and not FoodName:match("VIP") and not table.find(Foods, tostring(string.gsub(string.gsub(FoodName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price) then 
        table.insert(Foods, tostring(string.gsub(string.gsub(FoodName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price)
    end 
end



for i,v in pairs(game.ReplicatedStorage.SharedModules.ContentPacks:GetChildren()) do 
    if v:IsA("Folder") and v:FindFirstChild("InventorySubDB") then 
        local Folder = v:FindFirstChild("InventorySubDB")
        if Folder:FindFirstChild("Strollers") then
           local CheckFood = require(Folder.Strollers)
            for i,v in pairs(CheckFood) do 
                local FoodName = v.name  
                local Price = tostring(v.cost)
                if v.cost ~= nil and not v.not_for_sale and not v.robux and not v.name:match("Potion") and v.source_content_pack ~= "Desert2022" and v.source_content_pack ~= "Snow2022" and v.source_content_pack ~= "Fall2022" and v.source_content_pack ~= "Winter2022" then
                    table.insert(Strollers, tostring(string.gsub(string.gsub(FoodName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price)
                end
            end
        end
    end
end


for i,v in pairs(StrollerTable.entries) do 
    local Price = tostring(v.cost)
    local StrollerName = v.name 
    if v.cost ~= nil and not v.not_for_sale then 
        table.insert(Strollers, tostring(string.gsub(string.gsub(StrollerName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price)
    end
end



function VerifyGift(name)
    for i,v in pairs(game.ReplicatedStorage.SharedModules.ContentPacks:GetChildren()) do 
        if v:IsA("Folder") and v:FindFirstChild("InventorySubDB") then 
            local Folder = v:FindFirstChild("InventorySubDB")
            if Folder:FindFirstChild("Gifts") then 
                local CheckIsForSale = require(Folder.Gifts)[name]
                if CheckIsForSale and CheckIsForSale.not_for_sale then
                   return false 
                end
            end
        end 
    end
    return true
end

function GetGiftName(name)
    for i,v in pairs(game.ReplicatedStorage.SharedModules.ContentPacks:GetChildren()) do 
        if v:IsA("Folder") and v:FindFirstChild("InventorySubDB") then 
            local Folder = v:FindFirstChild("InventorySubDB")
            if Folder:FindFirstChild("Gifts") then 
                local CheckIsForSale = require(Folder.Gifts)[name]
                if CheckIsForSale and CheckIsForSale.name  then 
                   return CheckIsForSale.name 
                end
            end
        end 
    end
end


for i,v in pairs(game.ReplicatedStorage.SharedModules.ContentPacks:GetChildren()) do 
    if v:IsA("Folder") and v:FindFirstChild("InventorySubDB") then 
        local Folder = v:FindFirstChild("InventorySubDB")
        if Folder:FindFirstChild("Gifts") then 
            for i,v in pairs(require(Folder.Gifts)) do 
                if v.cost ~= nil and not v.not_for_sale then 
                    local Price = tostring(v.cost) 
                    local GiftName = v.name
                    if GiftName ~= "Halloween Mummy Cat Box" then 
                       table.insert(Gifts, tostring(string.gsub(string.gsub(GiftName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price)
                    end 
                end
            end 
        end
    end
end

for i,v in pairs(CurrentGifts.entries) do
    local Price = tostring(v.cost) 
    local GiftName = v.name
    if v.cost ~= nil and GiftName ~= "Halloween Mummy Cat Box" and not v.not_for_sale and not table.find(Gifts, tostring(string.gsub(string.gsub(GiftName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price)  then 
        table.insert(Gifts, tostring(string.gsub(string.gsub(GiftName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price)
    end
end


for i,v in pairs(Hair_Colors) do 
    table.insert(PetColors, tostring(BrickColor.new(v)))
end

function GetOrigin(PetName)
    for i,v in pairs(RS.SharedModules.ContentPacks:GetChildren()) do 
        if v:IsA("Folder") and v:FindFirstChild("InventorySubDB") then 
            local Folder = v:FindFirstChild("InventorySubDB")
            if Folder:FindFirstChild("Pets") then 
                for i,v in pairs(require(Folder.Pets)) do 
                    local Check_Pet = require(Folder.PetsOrigin)[i]
                    if Check_Pet.origin_items then 
                        for Pet,Data in pairs(Check_Pet.origin_items) do 
                            return tostring(string.gsub(string.gsub(tostring(Data), "_", " "), "^%l", function(c) return string.upper(c) end)) 
                        end
                    else 
                        return Check_Pet.origin
                    end
                end
            end
        end
    end             
end

function GetPrice2(PetName)
    for i, v in pairs(require(RS.ClientDB.Inventory.InventoryPetsSubDB.InventoryPetsSubDB).entries) do
        if i == PetName then
            if v.cost ~= nil then 
                return tostring(v.cost)
            end
        end
    end
end


function GetPrice(PetName)
    for i, v in pairs(require(RS.ClientDB.Inventory.InventoryPetsSubDB.InventoryPetsSubDB).entries) do
        if i == PetName then
            local Origin = GetOrigin(PetName)
            if v.cost and Origin then 
                return "Price: " .. tostring(v.cost) or DoublePrice(PetName) .. "\nOrigin: " .. tostring(Origin)
            elseif Origin then 
                return "Origin: " .. tostring(Origin)
            elseif v.cost ~= nil then 
                return "Price: " .. tostring(v.cost)
            else 
                return "Event Item:"
            end
        end
    end
end



function VerifyObtain(name)
    for i,v in pairs(game.ReplicatedStorage.SharedModules.ContentPacks:GetChildren()) do 
        if v:IsA("Folder") and v:FindFirstChild("InventorySubDB") then 
            local Folder = v:FindFirstChild("InventorySubDB")
            if Folder:FindFirstChild("Pets") then 
                local CheckIsForSale = require(Folder.Pets)[name]
                if CheckIsForSale and CheckIsForSale.not_for_sale then
                   return false 
                end
                for i,v in pairs(require(Folder.Pets)) do 
                    local Check_Pet = require(Folder.PetsOrigin)[name]
                    if v.cost and not v.currency_id and not v.liveops_map_type_required_for_purchase and name:match("egg") then 
                       return true 
                    end 
                    if Check_Pet then 
                       return Check_Pet.obtainable
                    end  
                end
            end
        end 
    end
    return true
end
       

for i,v in pairs(RS.SharedModules.ContentPacks:GetChildren()) do 
    if v:IsA("Folder") and v:FindFirstChild("InventorySubDB") then 
        local Folder = v:FindFirstChild("InventorySubDB")
        if Folder:FindFirstChild("Pets") then 
            for i,v in pairs(require(Folder.Pets)) do 
                local Check_Pet = require(Folder.PetsOrigin)[i]
                if (v.cost ~= nil or Check_Pet.origin=="Dolls") and not v.not_for_sale and Check_Pet.origin ~= "Task Board Update" and Check_Pet.origin ~= "Rain" and Check_Pet.origin ~= "Desert Update" and Check_Pet.origin ~= "Fall Update" and not Check_Pet.robux and not v.vip_exclusive and VerifyObtain(i) then 
                    PetAccessName = string.gsub(GetPetName(i) or i,"%p_-%a",string.upper)
                    Price = tostring(v.cost)
                    if v.cost == nil then 
                        Price = "Free"
                    end
                    if string.lower(i):match("egg") and VerifyObtain(i) or string.lower(tostring(PetAccessName)):match("egg") and VerifyObtain(i) then 
                        table.insert(Eggs, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price .. " Bucks")
                        table.insert(DontOveridePets, PetAccessName)
                    end 
                    if i:match("hallow") and VerifyObtain(i) then 
                        table.insert(BuyPets, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price .. " Candy")
                        table.insert(DontOveridePets, PetAccessName)
                    elseif i:match("winter") and VerifyObtain(i) then 
                        table.insert(BuyPets, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price .. " Gingerbread")
                        table.insert(DontOveridePets, PetAccessName)
                    elseif i:match("summer") and VerifyObtain(i) then 
                        table.insert(BuyPets, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price .. " Beach Balls")
                        table.insert(DontOveridePets, PetAccessName)
                    elseif VerifyObtain(i) then
                        table.insert(BuyPets, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price .. " Bucks")
                        table.insert(DontOveridePets, PetAccessName)
                    end
                elseif Check_Pet.robux and require(game:GetService("ReplicatedStorage").ClientDB.DeveloperProductDB)[i] and require(game:GetService("ReplicatedStorage").ClientDB.DeveloperProductDB)[i].name then 
                    local Name = require(game:GetService("ReplicatedStorage").ClientDB.DeveloperProductDB)[i].name
                    local Cost = require(game:GetService("ReplicatedStorage").ClientDB.DeveloperProductDB)[i].cost
                    table.insert(RobuxPets,  Name .. " | Price: " .. tostring(Cost) .. " Robux")
                end 
            end
        end
    end
end
           

for i,v in pairs(require(game:service'ReplicatedStorage'.Fsys).load("InventoryPetsOriginSubDB").entries) do 
    PetAccessName =string.gsub(GetPetName(i) or i,"%p_-%a",string.upper)
    local Price = GetPrice2(i)
    if v.obtainable and not v.robux and Price and v.origin ~= "Desert Update" and v.origin ~= "Fall Update" and v.origin ~= "Rain" and v.origin ~= "Ocean Event" and v.origin ~= "Task Board Update" and not table.find(BuyPets, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. Price) and VerifyObtain(i) and i ~= "retired_egg" then 
        if v.origin_items and #v.origin_items == 0 then 
            if PetAccessName:match("egg") and VerifyObtain(i) and not table.find(DontOveridePets, PetAccessName) or string.lower(tostring(PetAccessName)):match("egg") and VerifyObtain(i) and not table.find(DontOveridePets, PetAccessName) then 
                table.insert(Eggs, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price .. " Bucks")
                table.insert(DontOveridePets, PetAccessName)
            end 
            if i:match("hallow") and not table.find(DontOveridePets, PetAccessName) and VerifyObtain(i) then 
                table.insert(BuyPets, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price .. " Candy")
            elseif i:match("winter") and not table.find(DontOveridePets, PetAccessName) and VerifyObtain(i) then 
                table.insert(BuyPets, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price .. " Gingerbread")
            elseif i:match("summer") and not table.find(DontOveridePets, PetAccessName) and VerifyObtain(i) then 
                table.insert(BuyPets, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price .. " Beach Balls")
            elseif not table.find(DontOveridePets, PetAccessName) and VerifyObtain(i) then
                table.insert(BuyPets, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price .. " Bucks")
            end
        elseif v.origin_items and v.origin_items >= 1 then
            for x,d in pairs(v.origin_items) do 
                local Check = require(game:service'ReplicatedStorage'.Fsys).load("InventoryPetsOriginSubDB").entries[d]
                if Check.obtainable and not Check.robux then 
                    if i:match("hallow") and not table.find(DontOveridePets, PetAccessName) and VerifyObtain(i) then 
                        table.insert(BuyPets, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price .. " Candy")
                    elseif i:match("winter") and not table.find(DontOveridePets, PetAccessName) and VerifyObtain(i) then 
                        table.insert(BuyPets, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price .. " Gingerbread")
                    elseif i:match("summer") and not table.find(DontOveridePets, PetAccessName) and VerifyObtain(i) then 
                        table.insert(BuyPets, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price .. " Beach Balls")
                    elseif not table.find(DontOveridePets, PetAccessName) and VerifyObtain(i) then
                        table.insert(BuyPets, tostring(string.gsub(string.gsub(PetAccessName, "_", " "), "^%l", function(c) return string.upper(c) end)) .. " | Price: " .. Price .. " Bucks")
                    end
                end 
            end
        end
    end
end

local IsVip = false 
if Fsys("ClientData").get_server(game.Players.LocalPlayer, "is_vip") ~= nil then 
    table.insert(BuyPets, tostring("Retired Egg | Price: 600 Bucks"))
    table.insert(Eggs, tostring("Retired Egg | Price: 600 Bucks"))
    IsVip = true 
end


function QuestCount()
    local Count = 0
    for i, v in pairs(Fsys("ClientData").get("quest_manager")["quests_cached"]) do
        if v["entry_name"]:match("teleport") or v["entry_name"]:match("navigate") then
            Count = Count + 0
        else
            Count = Count + 1
        end
    end
    return Count
end

function ReRollCount()
    for i, v in pairs(Fsys("ClientData").get("quest_manager")["daily_quest_data"]) do
        if v == 1 or v == 0 then
            return v
        end
    end
end

function NewTask()
    NewTaskBool = false
    for i, v in pairs(Fsys("ClientData").get("quest_manager")["quests_cached"]) do
        if v["entry_name"]:match("teleport") or v["entry_name"]:match("navigate") then
            --nothing
        elseif not v.entry_name == "lures_2023_bait_lure" then 
            if QuestCount() == 1 then
                if NeonTable[v["entry_name"]] then
                    ClaimRemote:InvokeServer(v["unique_id"])
                    task.wait()
                elseif not NeonTable[v["entry_name"]] and ReRollCount() >= 1 then
                    RerollRemote:FireServer(v["unique_id"])
                    task.wait()
                else
                    ClaimRemote:InvokeServer(v["unique_id"])
                    task.wait()	
                end
            elseif QuestCount() > 1 then
                if NeonTable[v["entry_name"]] then
                    ClaimRemote:InvokeServer(v["unique_id"])
                    task.wait()
                elseif not NeonTable[v["entry_name"]] and ReRollCount() >= 1 then
                    RerollRemote:FireServer(v["unique_id"])
                    task.wait()
                elseif not NeonTable[v["entry_name"]] and ReRollCount() <= 0 then
                    ClaimRemote:InvokeServer(v["unique_id"])
                    task.wait()
                end
            end
        end
    end
    task.wait(1)
    NewTaskBool = true
end
function NewClaim()
    NewClaimBool = false
    for i, v in pairs(Fsys("ClientData").get("quest_manager")["quests_cached"]) do
        if ClaimTable[v["entry_name"]] then
            if v["entry_name"] == ClaimTable[v["entry_name"]]then
                ClaimRemote:InvokeServer(v["unique_id"])
                task.wait()
            end
        elseif not ClaimTable[v["entry_name"]] and v["steps_completed"] == 1 then
            ClaimRemote:InvokeServer(v["unique_id"])
            task.wait()
        end
    end
    task.wait(1)
    NewClaimBool = true
end

function GrabDailyReward()
    local Daily = Fsys("ClientData").get("daily_login_manager")
    if Daily.prestige % 2 == 0 then
        for i,v in pairs(RewardsTable) do
            if v[1] < Daily.stars or v[1] == Daily.stars then
                if not Daily.claimed_star_rewards[tostring(i)] then
                    Fsys("RouterClient").get("DailyLoginAPI/ClaimStarReward"):InvokeServer(tostring(i))
                end
            end
         end
    end
end



NewData = Data.get_data()[tostring(game:GetService("Players").LocalPlayer)]
for i,v in pairs(NewData.inventory.pets) do 
    Kind = string.gsub(GetPetName(v.kind) or v.kind,"%p_-%a",string.upper)
    if tostring(v.unique) == tostring(Last_Equipped) then 
        Settings.Pet = v.unique
        Settings.PetName = GetPetName(v.kind)
        Settings.SelectedPet = tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. v.properties.age .. " Years Old") 
        for x,d in pairs(RS.SharedModules.ContentPacks:GetChildren()) do 
            if d:IsA("Folder") and d:FindFirstChild("InventorySubDB") then 
                local Folder = d:FindFirstChild("InventorySubDB")
                if Folder:FindFirstChild("Pets") then 
                    local PetCheck = require(Folder:FindFirstChild("Pets"))[v.kind]
                    if PetCheck then 
                        Settings.PetName = tostring(PetCheck.name)
                        break 
                    end
                end
            end
        end
    end
end


table.sort(Pets, function(a,b)
	return a:lower() < b:lower()
end)
table.sort(PetAccess, function(a, b)
    local priceA = tonumber(a:match("| Price: (.-) .-$")) or 0
    local priceB = tonumber(b:match("| Price: (.-) .-$")) or 0
    return priceA < priceB
end)
table.sort(Gifts, function(a, b)
    local priceA = tonumber(a:match("| Price: (.-)$")) or 0
    local priceB = tonumber(b:match("| Price: (.-)$")) or 0
    return priceA < priceB
end)
table.sort(Foods, function(a, b)
    local priceA = tonumber(a:match("| Price: (.-)$")) or 0
    local priceB = tonumber(b:match("| Price: (.-)$")) or 0
    return priceA < priceB
end)
table.sort(Vehicles, function(a, b)
    local priceA = tonumber(a:match("| Price: (.-) .-$")) or 0
    local priceB = tonumber(b:match("| Price: (.-) .-$")) or 0
    return priceA < priceB
end)
table.sort(Strollers, function(a, b)
    local priceA = tonumber(a:match("| Price: (.-)$")) or 0
    local priceB = tonumber(b:match("| Price: (.-)$")) or 0
    return priceA < priceB
end)
-- table.sort(Toys, function(a, b)
--     local priceA = tonumber(a:match("| Price: (.-) .-$")) or 0
--     local priceB = tonumber(b:match("| Price: (.-) .-$")) or 0
--     return priceA < priceB
-- end)
table.sort(Eggs, function(a, b)
    local priceA = tonumber(a:match("| Price: (.-)$")) or 0
    local priceB = tonumber(b:match("| Price: (.-)$")) or 0
    return priceA < priceB
end)


table.sort(Potions, function(a, b)
    local priceA = tonumber(a:match("| Price: (.-)$")) or 0
    local priceB = tonumber(b:match("| Price: (.-)$")) or 0
    return priceA < priceB
end)
table.sort(Locations, function(a,b)
	return a:lower() < b:lower()
end)
table.sort(BuyPets, function(a, b)
    local priceA = tonumber(a:match("| Price: (.-) .-$")) or 0
    local priceB = tonumber(b:match("| Price: (.-) .-$")) or 0
    return priceA < priceB
end)

table.sort(Eggs, function(a, b)
    local priceA = tonumber(a:match("| Price: (.-) .-$")) or 0
    local priceB = tonumber(b:match("| Price: (.-) .-$")) or 0
    return priceA < priceB
end)



local LocationFunction
LocationFunction = Fsys("InteriorsM").enter_smooth

function TeleportLocation(a, b, c)
    local k = get_thread_identity()
    set_thread_identity(4)
    LocationFunction(a,b,c)
    set_thread_identity(k)
end 


function getPlayersByName(Name)
    local Name,Len,Found = string.lower(Name),#Name,{}
    for _,v in pairs(game:GetService('Players'):GetPlayers()) do
        if v.Name ~= game:GetService('Players').LocalPlayer then 
            if Name:sub(0,1) == '@' then
                if string.sub(string.lower(v.Name),1,Len-1) == Name:sub(2) then
                    return v 
                end
            else
                if string.sub(string.lower(v.Name),1,Len) == Name or string.sub(string.lower(v.DisplayName),1,Len) == Name then
                    return v 
                end
            end
        end
    end
end


function getPlayers()
	local players = {}

	for _, player in pairs(game:GetService("Players"):GetPlayers()) do
		if player ~= game:GetService("Players").LocalPlayer then
		    table.insert(players, player.Name)
        end
	end

	return players
end



print("no crash yet :)")




if not Settings.LoadedOnce then 
    Dialog.apps.HintApp:hint({
        text = "This script was made by Eazvy any other claims, of ownership are false. Enjoy using Eazvy Hub!",
        length = 10, 
        yields = false
    });
end

Main:AddSection({
    Name = "// " .. Money_Bag .. "Autofarm //"
})


local CurrentPets = Main:AddDropdown({Name = "Select Pet",Default=Settings.SelectedPet,Options=Pets,Callback = function(s)
    Settings.SelectedPet = s
    UpdateFile()
end    
})

Settings.SelectedPet = Pets[1]
UpdateFile()


function CheckAge(unique)
    local MaxAge 
    NewData = Data.get_data()[tostring(game.Players.LocalPlayer)]
    for i,v in pairs(NewData.inventory.pets) do 
        if v.properties.age >= 6 and tostring(v.unique) == tostring(unique) then
            MaxAge = true 
            return true 
        end
    end
    if not MaxAge then 
        return false 
    end
end

function CheckForFood(name)
    NewData = Data.get_data()[tostring(game.Players.LocalPlayer)]
    for i,v in pairs(NewData.inventory.food) do 
        if v.kind == name then 
           return true
        end 
    end 
    return false 
end 

function GetAilment()
    local Get_Pet = require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity() 
    if Get_Pet ~= nil and Get_Pet.ailments then 
        local Ailments = Get_Pet.ailments
        if Ailments.hungry then 
            return "hungry"
        elseif Ailments.thirsty then 
            return "thirsty"
        elseif Ailments.camping then 
            return "camping"
        elseif Ailments.salon then 
            return "salon"
        elseif Ailments.pizza_party then 
            return "pizza_party"
        elseif Ailments.school then 
            return "school"
        elseif Ailments.sleepy then 
            return "sleepy"
        elseif Ailments.dirty then 
            return "dirty"
        elseif Ailments.sick then 
            return "sick"
        elseif Ailments.bored then 
            return "bored"
        elseif Ailments.pool_party then 
            return "pool_party"
        else 
            return "None"
        end 
    end
end



function GetNewPet()
    NewData = Data.get_data()[tostring(PS.LocalPlayer)]
    FoundPet = false 
    for i,v in pairs(NewData.inventory.pets) do 
        Kind = string.gsub(GetPetName(v.kind) or v.kind,"%p_-%a",string.upper)
        if not v.properties.mega_neon and v.properties.age <= 5 and v.kind ~= "practice_dog" then 
            Settings.Pet = v.unique
            Settings.PetName = tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end))
            Settings.SelectedPet = tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. v.properties.age .. " Years Old") 
            FoundPet = true 
            break 
        end
    end
    if FoundPet then 
        RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(Settings.Pet)
        RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
        CurrentPets:Set(tostring(Settings.SelectedPet))
        return Settings.Pet 
    end 
    -- if not FoundPet then 
    --     for i,v in pairs(NewData.inventory.pets) do 
    --         Kind = string.gsub(GetPetName(v.kind) or v.kind,"%p_-%a",string.upper)
    --         if not v.properties.mega_neon and v.properties.age == 6 and v.kind ~= "practice_dog" then
    --            FoundPet = true 
    --            Settings.Pet = v.unique
    --            Settings.PetName = tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end))
    --            Settings.SelectedPet = tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. v.properties.age .. " Years Old") 
    --            RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(Settings.Pet)
    --            RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
    --            CurrentPets:Set(tostring(Settings.SelectedPet))
    --            return Settings.Pet
    --         end
    --     end
    -- end
end 


function CheckPet()
    NewData = Data.get_data()[tostring(PS.LocalPlayer)]
    local FoundAnyYoung = false 
    for i,v in pairs(NewData.inventory.pets) do 
        if not v.properties.mega_neon and v.properties.age <= 5 and v.kind ~= "practice_dog" and v.properties.age <= 5 then
            FoundAnyYoung = true 
            return FoundAnyYoung
        end
    end
    return false 
end 


function RandomPet()
    NewData = Data.get_data()[tostring(PS.LocalPlayer)]
    for i,v in pairs(NewData.inventory.pets) do 
        Kind = string.gsub(GetPetName(v.kind) or v.kind,"%p_-%a",string.upper)
        if not v.properties.mega_neon and Settings.PetName and Settings.PetName == tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end)) and v.kind ~= "practice_dog" then 
            Settings.Pet = v.unique
            Settings.PetName = tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end))
            RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(Settings.Pet)
            RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
            return 
        elseif not v.properties.mega_neon and v.properties.age <= 5 and v.kind ~= "practice_dog" then 
            Settings.Pet = v.unique
            Settings.PetName = tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end))
            RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(Settings.Pet)
            RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
            return 
        end
    end
end

function EquipByOrder()
    local reversed = {}
    for i = #PetSelection, 1, -1 do
        local val = PetSelection[#PetSelection]
        table.insert(reversed, val)
    end
    for i,v in pairs(NewData.inventory.pets) do 
        Kind = string.gsub(GetPetName(v.kind) or v.kind,"%p_-%a",string.upper)
         for x,d in pairs(reversed) do
            if tostring(d) == (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old")) and v.properties.age < 6 then 
                Settings.Pet = v.unique
                Settings.PetName = GetPetName(v.kind)
                RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
                return
            elseif tostring(d) == (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. v.properties.age .. " Years Old")) and v.properties.age < 6 then 
                Settings.Pet = v.unique
                Settings.PetName = GetPetName(v.kind)
                RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
                return
            end 
        end
    end
end

function CheckMap()
    if workspace.Interiors:FindFirstChildOfClass("Model") then 
        local CurrentMap = workspace.Interiors:FindFirstChildOfClass("Model")
        if CurrentMap.Name:match("MainMap") then 
            return true 
        else 
            return false 
        end
    end
end



function CheckPet()
    if not workspace.Pets:FindFirstChild(Settings.PetName) then 
        RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(Settings.Pet)
        RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
    end 
end




function EquipPet()
    NewData = Data.get_data()[tostring(PS.LocalPlayer)]
    for i,v in pairs(NewData.inventory.pets) do 
        Kind = string.gsub(GetPetName(v.kind) or v.kind,"%p_-%a",string.upper)
        if tostring(Settings.SelectedPet) == (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old")) then 
          Settings.Pet = v.unique
          Settings.PetName = tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end))
          RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
          return
        elseif tostring(Settings.SelectedPet) == (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. v.properties.age .. " Years Old")) then 
            Settings.Pet = v.unique
            Settings.PetName = tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end))
            RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
            return
        end 
    end
end 

function EquipPetById(petid)
    RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(petid)
end 

function RoundNumber(num)
    return(math.floor(num * 100))
end


function GetPet(name)
    local ClosestPet 
    for _,v in pairs(workspace.Pets:GetChildren()) do 
        if v:IsA("Model") and tostring(v.Name) == tostring(name) and (PS.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v.PrimaryPart.Position).Magnitude <= 15 then 
            ClosestPet = v 
        elseif v:IsA("Model") and tostring(v.Name) == tostring(name) then 
            ClosestPet = v
        end
    end
    return ClosestPet
end


function GetTaskPercentage()
    local HighestNumber = 0 
    for i,v in pairs(require(game:GetService("ReplicatedStorage").ClientModules.Core.ClientData).get("pet_char_wrapper").ailments_monitor.ailments) do 
        if v.progress and RoundNumber(v.progress) then 
            HighestNumber = v.progress 
        end 
    end
    return tostring(HighestNumber).."%" 
end 

function GetFinalAge(age, rarity)
    for i,v in pairs(require(game:GetService("ReplicatedStorage").ClientDB.PetProgressionDB).ailments_per_age[rarity]) do 
        if v > age then 
            return v
        end
    end
end 


function RarityLookUp(PetName)
    for i, v in pairs(require(RS.ClientDB.Inventory.InventoryPetsSubDB.InventoryPetsSubDB).entries) do
        if i == PetName then
            if v.rarity == "common" then
                return "Common"
            elseif v.rarity == "uncommon" then 
                return "Uncommon"
            elseif v.rarity == "rare" then 
                return "Rare"
            elseif v.rarity == "ultra_rare" then 
                return "Ultra-Rare"
            elseif v.rarity == "legendary" then 
                return "Legendary"
            end
        end
    end
end

function RarityLookUp2(PetName)
    for i, v in pairs(require(RS.ClientDB.Inventory.InventoryPetsSubDB.InventoryPetsSubDB).entries) do
        if i == PetName then
            return v.rarity 
        end
    end
    for i,v in pairs(RS.SharedModules.ContentPacks:GetChildren()) do 
        if v:IsA("Folder") and v:FindFirstChild("InventorySubDB") then 
            local Folder = v:FindFirstChild("InventorySubDB")
            if Folder:FindFirstChild("Pets") then 
                for i,v in pairs(require(Folder.Pets)) do 
                    local Check_Pet = require(Folder.PetsOrigin)[PetName]
                    if Check_Pet then 
                       return v.rarity 
                    end 
                end
            end
        end
    end
end




function GetOrders()
    local Orders = {}
    for i,v in pairs(workspace.HouseInteriors.furniture["nil/nil/PizzaShop/false/f-4"].PizzaShopOrderBoard.Board.RoactTree['1'].Stickies:GetChildren()) do 
        if v:IsA("Frame") and v:FindFirstChild("Pizza") then
            local Pizza = v:FindFirstChild("Pizza").Image 
            if Pizza == "rbxassetid://10695534624" then 
                table.insert(Orders,"Pepperoni")
            elseif Pizza == "rbxassetid://10795082658" then 
                 table.insert(Orders,"Veggie")
            elseif Pizza == "rbxassetid://10695534765" then 
                 table.insert(Orders,"Hawaiian")
            elseif Pizza == "rbxassetid://10695534924" then 
                 table.insert(Orders,"Cheese")
            end
        end
    end
    return Orders
end 

function GetPizzaToppingStation()
    for _,v in pairs(workspace.HouseInteriors.furniture:GetChildren()) do 
        if v:IsA("Folder") and v:FindFirstChildOfClass("Model") and v:FindFirstChildOfClass("Model"):FindFirstChild("UseBlocks") and v:FindFirstChildOfClass("Model").UseBlocks:FindFirstChild("Sauce") then 
           return v:FindFirstChildOfClass("Model"):GetAttribute("furniture_unique")
        end
    end 
end 


function GetDough()
    game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer("f-5", "UseBlock", nil, game:GetService("Players").LocalPlayer.Character)
end

function RemoveDough()
    game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer("f-47", "Pizza", nil, game:GetService("Players").LocalPlayer.Character)
    game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer("f-46", "Pizza", nil, game:GetService("Players").LocalPlayer.Character)
    game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer("f-7", "Pizza", nil, game:GetService("Players").LocalPlayer.Character)
    game:GetService("ReplicatedStorage").API["ToolAPI/UnequipAll"]:FireServer()
end 

function CheckDough()
    if game:GetService("Players").LocalPlayer.Character:FindFirstChild("PizzaShopPizza") ~= nil then 
        return true 
    else 
        return false 
    end
end



function RollDough()
    game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer("f-6", "UseBlock", {['cframe'] = CFrame.new(game:GetService("Players").LocalPlayer.Character.Head.Position + Vector3.new(0, -2, 0))}, game:GetService("Players").LocalPlayer.Character)
end 


function TopPizza()
    game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer("f-47", "Pizza", nil, game:GetService("Players").LocalPlayer.Character)
end 

function RefillBowls()
    for _,v in pairs(workspace.HouseInteriors.furniture:GetChildren()) do 
    if v:IsA('Folder') and v:FindFirstChild("PizzaShopToppingStation") then
        local FolderName = tostring(string.gsub(v.Name, "nil/nil/PizzaShop/false/", ""))
        local Bowls = v.PizzaShopToppingStation.Bowls 
        for i,v in pairs(Bowls:GetChildren()) do 
            if v:IsA("Model") and not v:FindFirstChild("Ingredients") then
                game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer("f-12", tostring(v), nil, game:GetService("Players").LocalPlayer.Character)
                wait(.35)
                game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer(FolderName, tostring(v), nil, game:GetService("Players").LocalPlayer.Character)
                wait(.35)
                game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer("f-12", "Tomato", nil, game:GetService("Players").LocalPlayer.Character)
                wait(.35)
                game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer(FolderName, "Tomato", nil, game:GetService("Players").LocalPlayer.Character)
                end 
            end
        end
    end
end 




function AddTopping(name)
    game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer("f-47", name, nil, game:GetService("Players").LocalPlayer.Character)
end 

function MakePizzas()
    for i,v in pairs(GetOrders()) do
        if tostring(v) == "Pepperoni" then 
            AddTopping("Sauce")
            AddTopping("Cheese")
            AddTopping("Pepperoni")
            return 
        elseif tostring(v) == "Veggie" then 
            AddTopping("Sauce")
            AddTopping("Cheese")
            AddTopping("Mushroom")
            return
        elseif tostring(v) == "Hawaiian" then 
            AddTopping("Sauce")
            AddTopping("Cheese")
            AddTopping("Ham")
            AddTopping("Pineapple")
            return
        elseif tostring(v) == "Cheese" then  
            AddTopping("Cheese")
            AddTopping("Sauce")
            return
        end
    end
end

function GetPizza()
    game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer("f-47", "Pizza", nil, game:GetService("Players").LocalPlayer.Character)
end 

local OvenName

function CookPizzas()
    for _,v in pairs(workspace.HouseInteriors.furniture:GetChildren()) do 
        if v:IsA("Folder") and v:FindFirstChild("PizzaShopOven") and not v.PizzaShopOven:FindFirstChild("ProgressBar") then
            OvenName = tostring(string.gsub(v.Name, "nil/nil/PizzaShop/false/", "")) 
            game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer(OvenName, "UseBlock", nil, game:GetService("Players").LocalPlayer.Character)
            return
        end 
    end
end

function GetPizzas()
    game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer(tostring(OvenName), "UseBlock", nil, game:GetService("Players").LocalPlayer.Character)
end






function DeliverPizza()
    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = FurnitureHelper.get_all_furniture_of_id("pizza_shop_conveyor_belt")[1].UseBlocks.Deliver.CFrame
    local ohString1 = "f-10"
    local ohString2 = "Deliver"
    local ohBoolean3 = true
    local ohInstance4 = game.Players.LocalPlayer.Character

    game:GetService("ReplicatedStorage").API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer(ohString1, ohString2, ohBoolean3, ohInstance4)
end 

function GetImage(pet)
    local ContentPacks = game:GetService("ReplicatedStorage").SharedModules.ContentPacks
    for i,v in pairs(ContentPacks:GetChildren()) do 
        if v:IsA("Folder") and v:FindFirstChild("InventorySubDB") then 
            if v.InventorySubDB:FindFirstChild("Pets") then 
                local PetsModule = require(v.InventorySubDB.Pets)
                for Data,Pet in pairs(PetsModule) do 
                    if Pet.Name == tostring(pet) then 
                        return Pet.image 
                    end
                end
            end
        end
    end
end

function getPetAilments()
    local PetAilments = {}
    if require(game:GetService("ReplicatedStorage").Fsys).load("ClientData").get("pet_char_wrapper") then 
       local Check = require(game:GetService("ReplicatedStorage").Fsys).load("ClientData").get("pet_char_wrapper")
       if Check.ailments_monitor and Check.ailments_monitor.ailments then 
            for _,v in pairs(require(game:GetService("ReplicatedStorage").Fsys).load("ClientData").get("pet_char_wrapper").ailments_monitor.ailments) do 
                if not table.find(PetAilments, v.id) then 
                    table.insert(PetAilments, v.id)
                end
            end      
        end
    end
   return PetAilments
end

local HouseModel = workspace.HouseInteriors.blueprint:FindFirstChildOfClass("Model")
local LastPosition 
if not HouseModel then 
    game.ReplicatedStorage.API["HousingAPI/UnsubscribeFromHouse"]:InvokeServer(game:GetService("Players").LocalPlayer)
    game.ReplicatedStorage.API["HousingAPI/SubscribeToHouse"]:FireServer(game:GetService("Players").LocalPlayer)
end

function GetFurniture(name)
    for _,v in pairs(workspace.HouseInteriors.furniture:GetChildren()) do 
        if v:IsA("Folder") and v:FindFirstChildOfClass("Model") then 
           if tostring(string.lower(v:FindFirstChildOfClass("Model").Name)):match(string.lower(name)) then 
              return v:FindFirstChildOfClass("Model"):GetAttribute("furniture_unique")
           end
        end
    end
end

function buyFurniture(furnitureName)
    local args = {
        [1] = {
            [1] = {
                ["properties"] = {
                    ["cframe"] = CFrame.new(9e9, 9e9, 9e9)
                },
                ["kind"] = furnitureName
            }
        }
    }
    game:GetService("ReplicatedStorage").API:FindFirstChild("HousingAPI/BuyFurnitures"):InvokeServer(unpack(args))
    task.wait(.3)
    return GetFurniture(furnitureName)
end

function hasEnoughMoney(amount)
    local clientData = require(game:GetService("ReplicatedStorage").Fsys).load("ClientData")
    local money = tonumber(clientData.get("money"))
    return money and money >= amount
end


local checkTick = tick()
repeat
    task.wait()
until workspace.HouseInteriors.blueprint:FindFirstChildOfClass("Model") or tick() - (checkTick or 0) >= 1.3

Status:Set("Checking Furniture...")

getgenv().PetCrib = GetFurniture("Crib") or GetFurniture("PetBed")
getgenv().PetShower = GetFurniture("Shower") or GetFurniture("Bath")
getgenv().WaterCooler = GetFurniture("TeaCup")
getgenv().Piano = GetFurniture("Piano")

if not PetCrib and hasEnoughMoney(5) then
    PetCrib = buyFurniture("basiccrib")
end

if not PetShower then
    PetShower = buyFurniture("stylishshower")
end

if not WaterCooler and hasEnoughMoney(32) then
    WaterCooler = buyFurniture("oolong_tea_cup")
end

if not Piano and hasEnoughMoney(100) then
    Piano = buyFurniture("piano")
end
 
if not PetCrib or not PetShower then 
    FurnitureString = ""
    if not PetCrib and not PetShower then 
        Library:MakeNotification({
            Name = "Eazvy Hub - Error",
            Content = "You're missing Pet Crib, and Pet Shower... Pet Farm won't work without it.",
            Image = "rbxassetid://161551681",
            Time = 5
        })
    else 
        Library:MakeNotification({
            Name = "Eazvy Hub - Error",
            Content = "You're missing Pet Crib.. Pet Farm won't work without it.",
            Image = "rbxassetid://161551681",
            Time = 5
        })
    end
end


function GetFurnitureCFrame(name)
    for _,v in pairs(workspace.HouseInteriors.furniture:GetChildren()) do 
        if v:IsA("Folder") and v:FindFirstChildOfClass("Model") then 
           if tostring(string.lower(v:FindFirstChildOfClass("Model").Name)):match(string.lower(name)) then 
              return v:FindFirstChildOfClass("Model").PrimaryPart
           end
        end
    end
end

PetFarm = Main:AddToggle({Name = "Pet Farm",Default=Settings.Autofarm,Callback = function(t)
    Settings.Autofarm = t 
    UpdateFile()
    if Settings.Autofarm and MainSettings.ApplySettings and MainSettings.ApplyID == tostring(game.Players.LocalPlayer.UserId) then 
        game.TextChatService.TextChannels.RBXGeneral:SendAsync("PetFarm Enabled")
    end
    if not Settings.Autofarm and GetAilment() ~= "None" then 
        RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(Settings.Pet)
        RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
    end 
    if not Settings.Autofarm then for i=1,5 do task.wait() Status:Set("Disabled") if Pet_Status then Pet_Status:Set("Disabled") end end return end 
    if Settings.Autofarm then 
        CurrentPets:Set(tostring(Settings.SelectedPet))
        if not Settings.SelectedPet then 
            GetNewPet()
        else 
            EquipPet()
        end 
        game:GetService("ReplicatedStorage").API:FindFirstChild("HousingAPI/SetDoorLocked"):InvokeServer(true)
        task.spawn(function()
            local Previously_Equipped = Settings.SelectedPet
            while Settings.Autofarm do
                if Previously_Equipped ~= Settings.SelectedPet then 
                    EquipPet()
                    Previously_Equipped = Settings.SelectedPet
                    task.wait(.15)
                end
                if not Settings.MaxPerformance then 
                    if Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] and Fsys("ClientData").get("pet_char_wrapper")["char"] ~= nil and Data.get_data()[tostring(game.Players.LocalPlayer)].inventory.pets[Settings.Pet] and not Settings.BoostPerformance then 
                        local Age 
                        local RPName 
                        local Percentage
                        local NeonString
                        local Flyable 
                        local Rideable
                        local Properties = Data.get_data()[tostring(game.Players.LocalPlayer)].inventory.pets[Settings.Pet].properties 
                        if Properties.neon and not Settings.MaxPerformance then 
                            Age = PetProgression.neon_age_names[Properties.age];
                        else
                            Age = PetProgression.age_names[Properties.age];
                        end
                        if Properties.rp_name ~= "" and Properties.rp_name ~= nil then 
                            RPName =  " | RP: " .. tostring(Properties.rp_name)
                        else 
                            RPName = ""
                        end
                        if Properties.mega_neon and Properties.flyable and Properties.rideable and not Settings.MaxPerformance then 
                            NeonString = "\nMFR: true"
                        elseif Properties.mega_neon and Properties.neon and Properties.flyable and Properties.rideable then 
                            NeonString = "\nNFR: true"
                        elseif Properties.mega_neon and not Properties.neon and not properties.flyable and not properties.rideable then 
                            NeonString = "\nNFR: false"
                        elseif Properties.mega_neon and NeonString ~= "\nMFR: true" then 
                            NeonString = "\nM-N: true"
                        elseif Properties.neon and not Properties.flyable and not Properties.rideable then 
                            if NeonString ~= nil and not Properties.mega_neon then 
                                NeonString = NeonString .. " | N: true"
                            elseif Properties.neon and not Properties.mega_neon then 
                                NeonString = " | N: true"
                            end
                        elseif not Properties.mega_neon and not Properties.neon then 
                            NeonString = " | N: false"
                        else 
                            NeonString = " | N: false"
                        end
                        if Properties.flyable then 
                            Flyable = " | F: true"
                        else 
                            Flyable = " | F: false"
                        end
                        if Properties.rideable then 
                            Rideable = " | R: true"
                        else 
                            Rideable = " | R: false"
                        end
                        if NeonString == "\nNFR: true" then 
                            Flyable = ""
                            Rideable = ""
                        elseif NeonString == "\nNFR: false" then
                            Flyable = ""
                            Rideable = ""
                        end
                        if Properties.flyable and Properties.rideable and not Properties.neon then 
                            NeonString = " | FR: true"
                            Flyable = ""
                            Rideable = ""
                        end
                        if Properties.neon and Properties.flyable and Properties.rideable then 
                            Flyable = ""
                            Rideable = ""
                            NeonString = " | NFR: true"
                        end
                        if not Properties.neon and not Properties.flyable and not Properties.rideable then 
                            Flyable = ""
                            Rideable = ""
                            NeonString = " | NFR: false"
                        end
                        local fsys = require(game.ReplicatedStorage:WaitForChild("Fsys")).load


                        -- if Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] and Fsys("ClientData").get("pet_char_wrapper")['pet_progression'] then 
                        --     for i,v in pairs(fsys("ClientData").get("pet_char_wrapper")["pet_progression"]) do
                        --             if i == "percentage" and Settings.Pet then
                        --             Percentage = tostring((math.floor(Properties.ailments_completed / GetFinalAge(Properties.ailments_completed, tostring(RarityLookUp2(Data.get_data()[tostring(game.Players.LocalPlayer)].inventory.pets[Settings.Pet].id))) * 100))) .. "%"
                        --         end
                        --     end
                        -- end
                        -- if Percentage then 
                        --     Percentage = Percentage
                        -- else 
                        --     Percentage = "0%"
                        -- end
                        if Settings.Autofarm and not Settings.MaxPerformance then 
                            local timeElap = tick() - initTime
                            local s = math.floor(timeElap)
                            local m = math.floor(s/60)
                            local h = math.floor(m/60)
                            local x = m%60
                            local d = s%60
                            local TimeElapsed = ""
                            local Hour = ""
                            local Min = ""
                            local Sec = "1 Second"
                            if h~= nil and h==1 then 
                                Hour = tostring(h) .. " Hour and "
                            elseif h~= nil and h>1 then 
                                Hour = tostring(h) .. " Hours and "
                            end 
                            if x~= nil and x==1 then 
                                Min = tostring(x) .. " Minute and "
                            elseif x~= nil and x>1 then 
                                Min = tostring(x) .. " Minutes and "
                            end 
                            if d~= nil and d== 1 then 
                                Sec = tostring(d) .. " Second "
                            elseif d~= nil and d> 1 then 
                                Sec = tostring(d) .. " Seconds "
                            end
                            TimeElapsed = Hour .. Min .. Sec
                            local Level = ""
                            if Properties.friendship_level and Ailment_PerFriendship and Properties.age == 6 and not Settings.MaxPerformance then 
                                Level =  " | Level: " .. Properties.friendship_level .. " | Next Level: " .. tostring(Properties.ailments_completed) .. "/" .. tostring(Ailment_PerFriendship)
                            end 
                            local TaskPercentage = "0%"
                            local frame 
                            for i,v in pairs(game.Players.LocalPlayer.PlayerGui:GetChildren()) do 
                                if v.Name == "pet_progression" and v:FindFirstChild("SurfaceGui") and v.SurfaceGui:FindFirstChild("PetProgression") and not Settings.BoostPerformance and v.SurfaceGui.PetProgression.TextLabel.Text ~= tostring(Age) and v.SurfaceGui.PetProgression.TextLabel.Text == Ailment then 
                                frame = v.SurfaceGui.PetProgression.Frame 
                                end 
                            end 
                            
                            
                            if frame and not Settings.MaxPerformance then 
                                -- Get the current size of the frame
                                local frameSize = frame.Size
                                
                                -- Extract the X (Width) component of the size
                                local width = frameSize.X.Scale -- The percentage of width
                                
                                -- Calculate the pet progression based on the extracted value
                                local petProgression = 1 - width
                                
                                -- Round the pet progression to the nearest percentage
                                local roundedProgression = math.floor(petProgression * 100 + 0.5)
                                
                                TaskPercentage= tostring(roundedProgression) .. "%"
                            end
                            if Settings.PetName:match("Egg") then 
                            Age = "Unhatched"
                            end 
                            -- TimeElapsed = tostring(h) .. " Hours " .. tostring(m) .. " Minutes " .. tostring(s) .. " Seconds" 
                            if Pet_Status and not Settings.MaxPerformance then
                                Pet_Status:Set(("Time Elapsed: " .. TimeElapsed .. "\nPet: " .. tostring(Settings.PetName) .. " | Age: " .. tostring(Age) .. " ("..tostring(Properties.age).."/".."6)" .. RPName .. " | Rarity: " .. tostring(RarityLookUp(Data.get_data()[tostring(game.Players.LocalPlayer)].inventory.pets[Settings.Pet].id)) .. Level .. " | Percentage: " .. TaskPercentage .. " | Progression: " .. tostring(Properties.ailments_completed) .. "/" .. GetFinalAge(Properties.ailments_completed, tostring(RarityLookUp2(Data.get_data()[tostring(game.Players.LocalPlayer)].inventory.pets[Settings.Pet].kind))) .. NeonString .. Flyable .. Rideable))
                            end 
                        end
                    end
                end
                task.wait()
            end
        end)

        
        task.spawn(function()
            while Settings.Autofarm do task.wait()
                do 
                    if Settings.AutoUseAgePotion and Settings.Autofarm and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm then 
                        NewData = Data.get_data()[tostring(game.Players.LocalPlayer)]
                        for i,v in pairs(NewData.inventory.food) do 
                            if v.kind == 'pet_age_potion' and Settings.AutoUseAgePotion and Settings.Autofarm and Data.get_data()[tostring(game.Players.LocalPlayer)].inventory.pets[Settings.Pet] and Data.get_data()[tostring(game.Players.LocalPlayer)].inventory.pets[Settings.Pet].properties.age < 6 and not Settings.PetName:match("Egg") and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity() ~= nil then 
                                Status:Set("Using Age Potion on " .. tostring(Settings.PetName))
                                if Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] and Fsys("ClientData").get("pet_char_wrapper")["char"] ~= nil and Settings.AutoUseAgePotion and Settings.Autofarm then 
                                   pcall(function()
                                        RS.API["PetObjectAPI/CreatePetObject"]:InvokeServer(
                                            "__Enum_PetObjectCreatorType_2",
                                            {["unique_id"] = v.unique}
                                        )
                                        task.wait(1.3)
                                        if Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] and Fsys("ClientData").get("pet_char_wrapper")["char"] ~= nil then 
                                        RS.API:FindFirstChild("PetAPI/ConsumeFoodItem"):FireServer(v.unique)
                                        end
                                    end)
                                end
                                break 
                            end 
                        end 
                    end 
                    if Settings.AutoFullGrown and Settings.Autofarm and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm then 
                        NewData = Data.get_data()[tostring(game.Players.LocalPlayer)]
                        for i,v in pairs(NewData.inventory.pets) do 
                            if v.unique == Settings.Pet and v.properties.age == 6 then 
                                if Settings.SendFull and not table.find(FullGrownPets, v.unique) then 
                                    data = {
                                    content = nil,
                                    embeds = { {
                                    title = tostring(Settings.PetName) .. " is now Fullgrown!",
                                    color = 16764167,
                                    }},
                                    username = "Eazvy Hub - Notifications",
                                    avatar_url = "https://www.clipartmax.com/png/middle/291-2914856_eye-outline-free-icon-transparent-background-eye-icon.png",
                                    attachments = { }
                                }
                                httprequest({
                                    Url = tostring(Settings.Webhook),
                                    Method = "POST",
                                    Headers = { ["Content-Type"] =  "application/json" },
                                    Body = game:GetService('HttpService'):JSONEncode(data)
                                    })
                                    table.insert(FullGrownPets, v.unique)
                                end
                                GetNewPet()
                                break 
                            end
                        end
                    end
                    if Settings.FarmSelected then 
                        EquipByOrder()
                    end
                    if Settings.AutoUseNew then 
                        NewData = Data.get_data()[tostring(game.Players.LocalPlayer)]
                        local oldest
                        for i,v in pairs(NewData.inventory.pets) do
                            if v.newness_order >= 1 and v.kind ~= "practice_dog" then 
                               oldest = v  
                            end 
                        end 
                        if oldest and oldest.unique and Settings.AutoUseNew then 
                            Settings.Pet = oldest.unique
                            Kind = string.gsub(GetPetName(oldest.kind) or oldest.kind,"%p_-%a",string.upper)
                            Settings.PetName = Kind
                            Settings.SelectedPet = tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. oldest.properties.age .. " Years Old") 
                        end 
                    end 
                    if Fsys("ClientData").get("equip_manager").pets and Settings.AutoUseNew then 
                       local CheckPet = Fsys("ClientData").get("equip_manager").pets
                       if CheckPet and CheckPet.unique ~= Settings.Pet then 
                           Kind = string.gsub(GetPetName(CheckPet.kind) or CheckPet.kind,"%p_-%a",string.upper)
                           Settings.Pet = CheckPet.unique
                           Settings.PetName = Kind
                           Settings.SelectedPet = tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. CheckPet.properties.age .. " Years Old") 
                           local Pets = {}
                           local New_Data = Data.get_data()[tostring(PS.LocalPlayer)]
                           for i,v in pairs(New_Data.inventory.pets) do 
                               Kind = string.gsub(GetPetName(v.kind) or v.kind,"%p_-%a",string.upper)
                               if v.properties.rp_name and v.properties.rp_name ~= "" and not table.find(Pets, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old"))) and v.kind ~= "practice_dog" then 
                                   table.insert(Pets, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old")))
                               elseif not v.properties.rp_name and not table.find(Pets, tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. v.properties.age .. " Years Old")) and v.kind ~= "practice_dog" then
                                   table.insert(Pets, tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. v.properties.age .. " Years Old"))
                               end
                           end
                       end 
                    end
                    if Settings.FarmAllPets and Settings.Autofarm and not Settings.FarmSelected and not PerformingTask and Settings.FarmAllPets then 
                        Data = require(game.ReplicatedStorage.ClientModules.Core.ClientData) 
                        NewData = Data.get_data()[tostring(game.Players.LocalPlayer)]
                            for i,v in pairs(NewData.inventory.pets) do 
                                Kind = string.gsub(GetPetName(v.kind) or v.kind,"%p_-%a",string.upper)
                                if v.properties.age < 6 and Settings.Autofarm and v.kind ~= "practice_dog" and not PerformingTask and Settings.FarmAllPets then 
                                Settings.Pet = v.unique
                                Settings.PetName = Kind
                                if Settings.ExcludeEggs and Settings.PetName:match("Egg") and not PerformingTask then 
                                    NewData = Data.get_data()[tostring(game.Players.LocalPlayer)]
                                        for i,v in pairs(NewData.inventory.pets) do 
                                            Kind = string.gsub(GetPetName(v.kind) or v.kind,"%p_-%a",string.upper)
                                            if v.properties.age < 6 and not GetAilment() and not tostring(v.kind):match("Egg") and v.kind ~= "practice_dog" and not PerformingTask and Settings.Autofarm and Settings.FarmAllPets then 
                                            Settings.Pet = v.unique
                                            Settings.PetName = GetPetName(v.kind)
                                            break 
                                        end
                                    end 
                                end
                                if GetAilment() == "None" and not PerformingTask and Settings.Autofarm and Settings.FarmAllPets then 
                                    RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
                                    Status:Set("Checking Tasks for " .. Settings.PetName .. "...")
                                end
                                if Settings.Autofarm and Settings.FarmAllPets then 
                                   task.wait(1.2)
                                end
                            end
                        end
                    end
                    local Pet_Check = require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity()
                    
                    -- if Pet_Check and Pet_Check.unique_id ~= Settings.Pet then 
                    --     Settings.Pet = Pet_Check.unique_id
                    --     Data = require(game.ReplicatedStorage.ClientModules.Core.ClientData) 
                    --     NewData = Data.get_data()[tostring(game.Players.LocalPlayer)]
                    --     for i,v in pairs(NewData.inventory.pets) do 
                    --         if v.unique == Settings.Pet then 
                    --             Kind = string.gsub(GetPetName(v.kind) or v.kind,"%p_-%a",string.upper)
                    --             Settings.Pet = v.unique
                    --             Settings.SelectedPet = tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. v.properties.age .. " Years Old") 
                    --             Settings.PetName = Kind
                    --             CurrentPets:Set(tostring(Settings.SelectedPet))
                    --             break 
                    --         end
                    --     end
                    -- end   
                    if Pet_Check and Pet_Check.is_in_workspace and Pet_Check.is_in_workspace == false then
                        RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(Settings.Pet)
                        RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
                    elseif Pet_Check == nil and Settings.Pet and Settings.Autofarm then 
                        if Fsys("ClientData").get("equip_manager").pets then 
                            local CheckPet = Fsys("ClientData").get("equip_manager").pets
                            if CheckPet and CheckPet.unique ~= Settings.Pet and Pet_Check == nil and Settings.Pet and Settings.Autofarm then 
                                RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(Settings.Pet)
                                RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
                            end
                        end
                    end 
                    if not PerformingTask and Settings.Autofarm  and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm and Pet_Check and not Settings.StartingSoon then 
                        local Ailment = GetAilment()
                        if Fsys("ClientData").get("pet_char_wrapper") == nil then 
                        EquipPet()
                        end
                        -- if Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] and Fsys("ClientData").get("pet_char_wrapper")["char"] ~= nil then 
                        --     game:GetService("ReplicatedStorage").API["AdoptAPI/MakeBabyJumpOutOfSeat"]:FireServer(Fsys("ClientData").get("pet_char_wrapper")["char"])
                        -- end 

                    
                    if Ailment == "hungry" and Settings.Autofarm  and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm then 
                        if Settings.DisplayStatusOnPet and not PerformingTask then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", tostring(Settings.PetName) .. " is hungry purchasing a Sandwich...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer(tostring(Settings.PetName) .. " is hungry purchasing a Sandwich...") end 
                        PerformingTask = true
                        Status:Set(tostring(Settings.PetName) .. " is hungry purchasing a Sandwich...")
                        RS.API:FindFirstChild("ShopAPI/BuyItem"):InvokeServer("food","schospital_refresh_2023_cafeteria_sandwich",{}) 
                        task.wait(.5)
                        local LastAilment = tick()
                        local foodTick = tick()
                        local Food = Fsys("ClientData").get("equip_manager").food 
                        if Food and Food.kind == "sandwich-default" then 
                            RS.API:FindFirstChild("PetAPI/ConsumeFoodItem"):FireServer(Food.unique)
                        elseif not Food or Food and Food.kind ~= "sandwich-default" then 
                            RS.API:FindFirstChild("ShopAPI/BuyItem"):InvokeServer("food","schospital_refresh_2023_cafeteria_sandwich",{}) 
                            task.wait(.5)
                            Food = Fsys("ClientData").get("equip_manager").food 
                            if Food then 
                                RS.API:FindFirstChild("PetAPI/ConsumeFoodItem"):FireServer(Food.unique)
                            end 
                        end
                        repeat task.wait() until not table.find(getPetAilments(), Ailment) or not Settings.Autofarm or tick() - (foodTick or 0) >= 5 + Shared_Consts.full_food_bowl_drink_duration --or tick() - (LastAilment or 0) >= 25 and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state ~= nil and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state.distance_to_owner <= 30 
                        if Settings.DisplayStatusOnPet then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finished giving a Sandwich to " .. tostring(Settings.PetName)) game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finished giving a Sandwich to " .. tostring(Settings.PetName)) end 
                        Status:Set("Finished giving a Sandwich to " .. tostring(Settings.PetName))
                        PerformingTask = false 

                    elseif Ailment == "thirsty" and Settings.Autofarm and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm then 
                        if Settings.DisplayStatusOnPet and not PerformingTask then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", tostring(Settings.PetName) .. " is thirsty purchasing a Water...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer(tostring(Settings.PetName) .. " is thirsty purchasing a Water...") end 
                        PerformingTask = true 
                        GaveWater = false 
                        local waterTick = tick()
                        local LastAilment = tick()
                        if not WaterCooler and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm and not GaveWater then 
                            Status:Set(tostring(Settings.PetName) .. " is thirsty purchasing a Water...")
                            RS.API:FindFirstChild("ShopAPI/BuyItem"):InvokeServer("food","water",{}) 
                            task.wait()
                            local Water = Fsys("ClientData").get("equip_manager").food 
                            if Water and Water.kind == "water" then 
                                RS.API:FindFirstChild("PetAPI/ConsumeFoodItem"):FireServer(Water.unique)
                                GaveWater = true
                            else 
                                RS.API:FindFirstChild("ShopAPI/BuyItem"):InvokeServer("food","water",{})
                                task.wait(.5)
                                local Water = Fsys("ClientData").get("equip_manager").food 
                                if Water and Water.kind == "water" then 
                                    RS.API:FindFirstChild("PetAPI/ConsumeFoodItem"):FireServer(Water.unique)
                                    GaveWater = true
                                end
                            end
                        elseif game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm and not GaveWater then
                            if Settings.DisplayStatusOnPet and not PerformingTask then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Giving Tea to " .. tostring(Settings.PetName) .. "...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Giving Tea to " .. tostring(Settings.PetName) .. "...") end 
                            PerformingTask = true 
                            Status:Set("Giving Tea to " .. tostring(Settings.PetName) .. "...")
                            task.spawn(function()
                                if Pet_Check and Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] and Fsys("ClientData").get("pet_char_wrapper")["char"] ~= nil then 
                                    local Get_Pet = require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity() 
                                    if Get_Pet ~= nil and Get_Pet.ailments and Get_Pet.ailments.thirsty and WaterCooler and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Head") then 
                                        task.spawn(function()
                                            game.ReplicatedStorage.API["HousingAPI/ActivateFurniture"]:InvokeServer(game.Players.LocalPlayer, WaterCooler, "UseBlock", {}, game.Players.LocalPlayer.Character)
                                            task.wait(.1)
                                            local Water = Fsys("ClientData").get("equip_manager").food 
                                            if Water and Water.kind == "oolong_tea_cup" then 
                                                RS.API:FindFirstChild("PetAPI/ConsumeFoodItem"):FireServer(Water.unique)
                                            elseif WaterCooler then 
                                                task.spawn(function()
                                                    game.ReplicatedStorage.API["HousingAPI/ActivateFurniture"]:InvokeServer(game.Players.LocalPlayer, WaterCooler, "UseBlock", {}, game.Players.LocalPlayer.Character)
                                                end)
                                            end 
                                        end)
                                        GaveWater = true
                                    end
                                end
                            end)
                        end
                        repeat task.wait() until not table.find(getPetAilments(), Ailment) or not Settings.Autofarm or tick() - (waterTick or 0) >= 5 + Shared_Consts.full_water_bowl_drink_duration--or tick() - (LastAilment or 0) >= 25 and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state ~= nil and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state.distance_to_owner <= 30
                        if Settings.DisplayStatusOnPet then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finished giving Tea to " .. tostring(Settings.PetName) .. "...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finished giving Tea to " .. tostring(Settings.PetName) .. "...") end 
                        Status:Set("Finished giving Tea to " .. tostring(Settings.PetName) .. "...")
                        PerformingTask = false

                    elseif Ailment == "camping" and Settings.Autofarm  and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm then 
                            if Settings.DisplayStatusOnPet and not PerformingTask then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finishing Camping Task...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finishing Camping Task...") end 
                            PerformingTask = true 
                            campingTick = tick()
                            local LastAilment = tick()
                            Status:Set("Finishing Camping Task...")
                            RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(Settings.Pet)
                            RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
                            task.spawn(function()
                                if Pet_Check and Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] and Fsys("ClientData").get("pet_char_wrapper")["char"] ~= nil then 
                                    local Get_Pet = require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity() 
                                    if Get_Pet ~= nil and Get_Pet.ailments and Get_Pet.ailments.dirty then 
                                        RS.API["HousingAPI/ActivateFurniture"]:InvokeServer(game.Players.LocalPlayer, PetShower, "UseBlock", {['cframe'] = CFrame.new(-27,20,-1056)}, Fsys("ClientData").get("pet_char_wrapper")["char"])
                                    else
                                        RS.API["HousingAPI/ActivateFurniture"]:InvokeServer(game.Players.LocalPlayer, PetCrib, "UseBlock", {['cframe'] = CFrame.new(-27,20,-1056)}, Fsys("ClientData").get("pet_char_wrapper")["char"])
                                    end
                                end
                            end)
                            repeat task.wait() until not table.find(getPetAilments(), Ailment) or not Settings.Autofarm or tick() - (campingTick or 0) >= Social_Ailment_Durations.camping or tick() - (LastAilment or 0) >= 25 and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state ~= nil and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state.distance_to_owner <= 150
                            Status:Set("Finished Camping...")
                            if Settings.DisplayStatusOnPet then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finished Camping...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finished Camping...") end 
                            task.wait()
                            PerformingTask = false
                        elseif Ailment == "sleepy" and Settings.Autofarm  and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm then 
                            if Settings.DisplayStatusOnPet and not PerformingTask then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Putting " .. tostring(Settings.PetName) .. " to Sleep...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Putting " .. tostring(Settings.PetName) .. " to Sleep...") end 
                            PerformingTask = true 
                            Status:Set("Getting Crib...")
                            local sleepTick = tick()
                            local LastAilment = tick()
                            Status:Set("Putting " .. tostring(Settings.PetName) .. " to Sleep...")
                            if Settings.TeleportMethod == "Teleport" then 
                                game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
                                RS.API["HousingAPI/SubscribeToHouse"]:FireServer(game:GetService("Players").LocalPlayer)
                                TeleportLocation("housing", "MainDoor", {house_owner = game:GetService("Players").LocalPlayer})
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.HouseInteriors.blueprint[tostring(workspace.HouseInteriors.blueprint:FindFirstChildWhichIsA("Model"))].Doors.MainDoor.WorkingParts.TouchToEnter.CFrame:ToWorldSpace(CFrame.new(0, 0, -9.5))
                                game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
                                local PetCrib2 = GetFurnitureCFrame("Crib") or GetFurnitureCFrame("PetBed")
                                if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and PetCrib then 
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = PetCrib2.CFrame 
                                    task.spawn(function()
                                        if Pet_Check and Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] and Fsys("ClientData").get("pet_char_wrapper")["char"] ~= nil then 
                                            RS.API["HousingAPI/ActivateFurniture"]:InvokeServer(game.Players.LocalPlayer, PetCrib, "UseBlock", {['cframe'] = CFrame.new(PetCrib2.Position)}, Fsys("ClientData").get("pet_char_wrapper")["char"])
                                        end
                                    end)
                                end
                            else 
                                task.spawn(function()
                                    if Pet_Check and Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] and Fsys("ClientData").get("pet_char_wrapper")["char"] ~= nil then 
                                        RS.API["HousingAPI/ActivateFurniture"]:InvokeServer(game.Players.LocalPlayer, PetCrib, "UseBlock", {['cframe'] = CFrame.new(game.Players.LocalPlayer.Character.Head.Position)}, Fsys("ClientData").get("pet_char_wrapper")["char"])
                                    end
                                end)
                            end
                            repeat task.wait() until not table.find(getPetAilments(), Ailment) or not Settings.Autofarm or tick() - (sleepTick or 0) >= 5 + Shared_Consts.full_sleep_duration or tick() - (LastAilment or 0) >= 25 and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state ~= nil and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state.distance_to_owner >= 500
                            if Settings.DisplayStatusOnPet then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finished Putting " .. tostring(Settings.PetName) .. " to Sleep...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finished Putting " .. tostring(Settings.PetName) .. " to Sleep...") end 
                            Status:Set("Finished Putting " .. tostring(Settings.PetName) .. " to Sleep...")
                            task.wait()
                            PerformingTask = false 
                            Ailment = GetAilment()
                            if Ailment == "camping" and Settings.Autofarm  and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm then 
                                if Settings.DisplayStatusOnPet and not PerformingTask then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finishing Camping Task...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finishing Camping Task...") end 
                                PerformingTask = true 
                                campingTick = tick()
                                local LastAilment = tick()
                                Status:Set("Finishing Camping Task...")
                                RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(Settings.Pet)
                                RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
                                task.spawn(function()
                                    if Pet_Check and Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] and Fsys("ClientData").get("pet_char_wrapper")["char"] ~= nil then 
                                        local Get_Pet = require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity() 
                                        if Get_Pet ~= nil and Get_Pet.ailments and Get_Pet.ailments.dirty then 
                                            RS.API["HousingAPI/ActivateFurniture"]:InvokeServer(game.Players.LocalPlayer, PetShower, "UseBlock", {['cframe'] = CFrame.new(-27,20,-1056)}, Fsys("ClientData").get("pet_char_wrapper")["char"])
                                        else
                                            RS.API["HousingAPI/ActivateFurniture"]:InvokeServer(game.Players.LocalPlayer, PetCrib, "UseBlock", {['cframe'] = CFrame.new(-27,20,-1056)}, Fsys("ClientData").get("pet_char_wrapper")["char"])
                                        end
                                    end
                                end)
                                repeat task.wait() until not table.find(getPetAilments(), Ailment) or not Settings.Autofarm or tick() - (campingTick or 0) >= Social_Ailment_Durations.camping or tick() - (LastAilment or 0) >= 25 and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state ~= nil and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state.distance_to_owner <= 150
                                Status:Set("Finished Camping...")
                                if Settings.DisplayStatusOnPet then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finished Camping...")  game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finished Camping Task...") end 
                                task.wait()
                                PerformingTask = false
                            end 
                        elseif Ailment == "dirty" and Settings.Autofarm then 
                            if Settings.DisplayStatusOnPet and not PerformingTask then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Cleaning " .. tostring(Settings.PetName) .. "...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Cleaning " .. tostring(Settings.PetName) .. "...") end 
                            PerformingTask = true 
                            Status:Set("Getting Shower...")
                            RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(Settings.Pet)
                            RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
                            if PetShower then 
                                local dirtyTick = tick()
                                local LastAilment = tick()
                                task.wait(.35)
                                task.spawn(function()
                                    Status:Set("Cleaning " .. tostring(Settings.PetName) .. "...")
                                    if Pet_Check and Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] then 
                                        RS.API["HousingAPI/ActivateFurniture"]:InvokeServer(game.Players.LocalPlayer, PetShower, "UseBlock", {['cframe'] = CFrame.new(game:GetService("Players").LocalPlayer.Character:FindFirstChild("Head").Position)}, Fsys("ClientData").get("pet_char_wrapper")["char"])
                                    end
                                end)
                                repeat task.wait() until not table.find(getPetAilments(), Ailment) or not Settings.Autofarm or tick() - (dirtyTick or 0) >= 5 + Shared_Consts.shower_duration or tick() - (LastAilment or 0) >= 25 and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state.distance_to_owner ~= nil and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state.distance_to_owner >= 500
                                if Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] and Fsys("ClientData").get("pet_char_wrapper")["char"] ~= nil then 
                                    game:GetService("ReplicatedStorage").API["AdoptAPI/MakeBabyJumpOutOfSeat"]:FireServer(Fsys("ClientData").get("pet_char_wrapper")["char"])
                                end 
                                if Settings.DisplayStatusOnPet then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finished Cleaning " .. tostring(Settings.PetName) .. "...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finished Cleaning " .. tostring(Settings.PetName) .. "...") end 
                                Status:Set("Finished Cleaning " .. tostring(Settings.PetName) .. "...")
                            end
                            PerformingTask = false 
                            Ailment = GetAilment()
                            if Ailment == "camping" and Settings.Autofarm  and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm then 
                                if Settings.DisplayStatusOnPet and not PerformingTask then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finishing Camping Task...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finishing Camping Task...") end 
                                PerformingTask = true 
                                campingTick = tick()
                                local LastAilment = tick()
                                Status:Set("Finishing Camping Task...")
                                RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(Settings.Pet)
                                RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
                                task.spawn(function()
                                    if Pet_Check and Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] and Fsys("ClientData").get("pet_char_wrapper")["char"] ~= nil then 
                                        local Get_Pet = require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity() 
                                        if Get_Pet ~= nil and Get_Pet.ailments and Get_Pet.ailments.dirty then 
                                            RS.API["HousingAPI/ActivateFurniture"]:InvokeServer(game.Players.LocalPlayer, PetShower, "UseBlock", {['cframe'] = CFrame.new(-27,20,-1056)}, Fsys("ClientData").get("pet_char_wrapper")["char"])
                                        else
                                            RS.API["HousingAPI/ActivateFurniture"]:InvokeServer(game.Players.LocalPlayer, PetCrib, "UseBlock", {['cframe'] = CFrame.new(-27,20,-1056)}, Fsys("ClientData").get("pet_char_wrapper")["char"])
                                        end
                                    end
                                end)
                                repeat task.wait() until not table.find(getPetAilments(), Ailment) or not Settings.Autofarm or tick() - (campingTick or 0) >= Social_Ailment_Durations.camping or tick() - (LastAilment or 0) >= 25 and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state ~= nil and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state.distance_to_owner <= 150
                                Status:Set("Finished Camping...")
                                if Settings.DisplayStatusOnPet then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finished Camping Task...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finished Camping Task... ") end 
                                task.wait()
                                PerformingTask = false
                            end
                        elseif Ailment == "bored" and Settings.Autofarm  and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm and not Settings.StartingSoon then 
                            if Settings.DisplayStatusOnPet and not PerformingTask then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finishing Bored Task...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finishing Bored Task...") end 
                            PerformingTask = true 
                            Status:Set("Finishing Bored Task...")
                            RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(Settings.Pet)
                            RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
                            local boredTick = tick()
                            local LastAilment = tick()
                            if Piano then 
                                task.spawn(function()
                                    if Pet_Check and Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] then 
                                        RS.API["HousingAPI/ActivateFurniture"]:InvokeServer(PS.LocalPlayer, Piano, "Seat1", {['cframe'] = CFrame.new(game:GetService("Players").LocalPlayer.Character:FindFirstChild("Head").Position)}, Fsys("ClientData").get("pet_char_wrapper")["char"])
                                    end
                                end)
                            else
                                task.spawn(function()
                                    workspace.StaticMap.Park.BoredAilmentTarget.CanCollide = true 
                                    workspace.StaticMap.Park.BoredAilmentTarget.Transparency = 1 
                                    workspace.StaticMap.Park.BoredAilmentTarget.Size = Vector3.new(1000,0,1000)
                                    PS.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.StaticMap.Park.BoredAilmentTarget.CFrame + Vector3.new(0, 1, 0)
                                    wait(.35)
                                    RS.API:FindFirstChild("PetAPI/ReplicateActivePerformances"):FireServer(Fsys("ClientData").get("pet_char_wrapper")["char"], {["RunInCircles"] = true})
                                end)
                            end
                            repeat task.wait() until not table.find(getPetAilments(), Ailment) or not Settings.Autofarm or tick() - (boredTick or 0) >= Social_Ailment_Durations.bored  or tick() - (LastAilment or 0) >= 25 and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().active_performances ~= nil and not require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().active_performances.Bored
                            -- workspace.StaticMap.Park.BoredAilmentTarget.Size = Vector3.new(1,1,1)
                            -- workspace.StaticMap.Park.BoredAilmentTarget.CanCollide = false 
                            Status:Set("Finished Bored Task...")
                            if Settings.DisplayStatusOnPet then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finished Bored Task...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finished Bored Task...") end 
                            PerformingTask = false 
                        elseif Ailment == "salon" and Settings.Autofarm  and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm and not Settings.StartingSoon and Settings.Autofarm then 
                            if Settings.DisplayStatusOnPet and not PerformingTask then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finishing Salon Task...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finishing Salon Task...") end 
                            PerformingTask = true 
                            local Previous_Destination = Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "char_wrapper").location.destination_id
                            for _,v in pairs(Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "char_wrapper").location) do 
                                if _ == "destination_id" and v == "housing" then 
                                    Status:Set("Creating Temp Part...")
                                    CreateTempPart()
                                end
                            end
                            Status:Set("Finishing Salon Task...")
                            salonTick = tick()
                            for i=1,35 do task.wait(.55)
                                RS.API:FindFirstChild("LocationAPI/SetLocation"):FireServer("Salon")
                            end
                            repeat task.wait() until not table.find(getPetAilments(), Ailment) or not Settings.Autofarm or tick() - (salonTick or 0) >= Social_Ailment_Durations.salon
                            Status:Set(tostring(Settings.PetName) .. " is finished at the Salon...") 
                            if Settings.DisplayStatusOnPet then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", tostring(Settings.PetName) .. " is finished at the Salon...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer(tostring(Settings.PetName) .. " is finished at the Salon...")  end 
                            PerformingTask = false 
                            -- RS.API:FindFirstChild("LocationAPI/SubscribeToInteriorFurniture"):FireServer(Previous_Destination.full_destination_id)
                            -- RS.API:FindFirstChild("LocationAPI/SetLocation"):FireServer(Previous_Destination.destination_id)
                        elseif Ailment == "school" and not Settings.StartingSoon and Settings.Autofarm then 
                            if Settings.DisplayStatusOnPet and not PerformingTask then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finishing School Task...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finishing School Task...") end 
                            PerformingTask = true 
                            local Previous_Destination = Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "char_wrapper").location.destination_id
                            for _,v in pairs(Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "char_wrapper").location) do 
                                if _ == "destination_id" and v == "housing" then 
                                    Status:Set("Creating Temp Part...")
                                    CreateTempPart()
                                end
                            end
                            Status:Set("Finishing School Task...")
                            schoolTick = tick()
                            for i=1,35 do task.wait(.35)
                                RS.API:FindFirstChild("LocationAPI/SetLocation"):FireServer("School")
                            end
                            Status:Set("Waiting for School Task to Finish...")
                            repeat task.wait() until not table.find(getPetAilments(), Ailment) or not Settings.Autofarm or tick() - (schoolTick or 0) >= Social_Ailment_Durations.school
                            Status:Set("Finished School...")
                            if Settings.DisplayStatusOnPet then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finished School Task...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finished School...") end 
                            -- RS.API:FindFirstChild("LocationAPI/SubscribeToInteriorFurniture"):FireServer(Previous_Destination.full_destination_id)
                            -- RS.API:FindFirstChild("LocationAPI/SetLocation"):FireServer(Previous_Destination.destination_id)
                            PerformingTask = false
                        elseif Ailment == "sick" then 
                            if Settings.DisplayStatusOnPet and not PerformingTask then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Healing " .. tostring(Settings.PetName) .. "...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Healing " .. tostring(Settings.PetName) .. "...") end 
                            PerformingTask = true 
                            local sickTick = tick()
                            fedApple = false 
                            Status:Set("Healing " .. tostring(Settings.PetName) .. "...")  
                            if healedTimes <= 29 then 
                                RS.API:FindFirstChild("ShopAPI/BuyItem"):InvokeServer("food","healing_apple",{}) 
                                task.wait()
                                local Tool = PS.LocalPlayer.Character:FindFirstChild("GenericTool")
                                if Tool and Tool:FindFirstChild("unique") and not fedApple then 
                                    RS.API:FindFirstChild("PetAPI/ConsumeFoodItem"):FireServer(Tool:FindFirstChild("unique").Value)
                                    healedTimes = healedTimes + 1 
                                    fedApple = true 
                                elseif not Tool and not fedApple then 
                                    RS.API:FindFirstChild("ShopAPI/BuyItem"):InvokeServer("food","healing_apple",{})  
                                    task.wait()
                                    Tool = PS.LocalPlayer.Character:FindFirstChild("GenericTool")
                                    task.wait(.15)
                                    if Tool and Tool:FindFirstChild("unique") and not fedApple then 
                                        RS.API:FindFirstChild("PetAPI/ConsumeFoodItem"):FireServer(Tool:FindFirstChild("unique").Value)
                                        healedTimes = healedTimes + 1 
                                        fedApple = true 
                                    end 
                                end
                            elseif not fedApple then 
                                RS.API["MonitorAPI/HealWithDoctor"]:FireServer()
                                fedApple = true 
                            end 
                            repeat task.wait() until not table.find(getPetAilments(), Ailment) or not Settings.Autofarm or tick() - (sickTick or 0) >= 100
                            if Settings.DisplayStatusOnPet then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finished Healing " .. tostring(Settings.PetName) .. "...")  game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finished Healing " .. tostring(Settings.PetName) .. "...") end 
                            Status:Set("Finished Healing " .. tostring(Settings.PetName) .. "...")
                            PerformingTask = false 
                        elseif Ailment == "pizza_party" and Settings.Autofarm  and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm and not Settings.StartingSoon and Settings.Autofarm then 
                            if Settings.DisplayStatusOnPet and not PerformingTask then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finishing Pizza Party...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finishing Pizza Party Task...") end 
                            PerformingTask = true 
                            local Previous_Destination = Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "char_wrapper").location.destination_id
                            for _,v in pairs(Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "char_wrapper").location) do 
                                if _ == "destination_id" and v == "housing" then 
                                    Status:Set("Creating Temp Part...")
                                    CreateTempPart()
                                end
                            end
                            pizzaTick = tick()
                            Status:Set("Finishing Pizza Party Task...")
                            for i=1,35 do task.wait(.35)
                                RS.API:FindFirstChild("LocationAPI/SetLocation"):FireServer("PizzaShop")
                            end
                            repeat task.wait() until not table.find(getPetAilments(), Ailment) or not Settings.Autofarm or tick() - (pizzaTick or 0) >= Social_Ailment_Durations.pizza_party
                            Status:Set("Finished Pizza Party...")
                            if Settings.DisplayStatusOnPet then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finished Pizza Party...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finished Pizza Party...") end 
                            -- RS.API:FindFirstChild("LocationAPI/SubscribeToInteriorFurniture"):FireServer(Previous_Destination.full_destination_id)
                            -- RS.API:FindFirstChild("LocationAPI/SetLocation"):FireServer(Previous_Destination.destination_id)
                            PerformingTask = false 
                        elseif Ailment == "pool_party" and Settings.Autofarm  and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm then 
                            if Settings.DisplayStatusOnPet and not PerformingTask then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finishing Pizza Party...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finishing Pizza Party Task...") end 
                            PerformingTask = true 
                            poolTick = tick()
                            local LastAilment = tick()
                            Status:Set("Finishing Pool Party...")
                            if Settings.DisplayStatusOnPet then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finishing Pool Party...")  game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finishing Pool Party...") end 
                            RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(Settings.Pet)
                            RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(Settings.Pet)
                            task.spawn(function()
                                if Pet_Check and Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] then 
                                    local Get_Pet = require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity() 
                                    if Get_Pet ~= nil and Get_Pet.ailments and Get_Pet.ailments.dirty then 
                                        RS.API["HousingAPI/ActivateFurniture"]:InvokeServer(game.Players.LocalPlayer, PetShower, "UseBlock", {['cframe'] = CFrame.new(-551.204407, 10.4198971, -1413.8739, 1, 0, 0, 0, 0, -1, 0, 1, 0)}, Fsys("ClientData").get("pet_char_wrapper")["char"])
                                    else
                                        RS.API["HousingAPI/ActivateFurniture"]:InvokeServer(game.Players.LocalPlayer, PetCrib, "UseBlock", {['cframe'] = CFrame.new(-551.204407, 10.4198971, -1413.8739, 1, 0, 0, 0, 0, -1, 0, 1, 0)}, Fsys("ClientData").get("pet_char_wrapper")["char"])
                                    end
                                end
                            end)
                            
                            repeat task.wait() until not table.find(getPetAilments(), Ailment) or not Settings.Autofarm or tick() - (poolTick or 0) >= Social_Ailment_Durations.pool_party + 5 --or tick() - (LastAilment or 0) >= 25 and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state ~= nil and require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager).get_local_owned_pet_entity().goal_state.distance_to_owner <= 30
                            Status:Set("Finished Pool Party...")
                            if Settings.DisplayStatusOnPet then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Finished Pool Party...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Finished Pool Party...") end 
                            task.wait()
                            PerformingTask = false 
                        end 
                        if PerformingTask then 
                            Status:Set(Status.Text.."\nProgress: "..GetTaskPercentage())
                        end
                        if not PerformingTask and Settings.Autofarm  and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Anchored and Settings.Autofarm and not Settings.EventFarm then task.wait(.15) Status:Set("Waiting for Tasks...") if Settings.DisplayStatusOnPet and not PerformingTask and Settings.Autofarm then game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetSetting"):FireServer("rp_name", "Waiting for Tasks...") game:GetService("ReplicatedStorage").API:FindFirstChild("SettingsAPI/SetPetRoleplayName"):FireServer("Waiting for Tasks...") end end 
                    end 
                end
            end
        end)
    else 
        Status:Set("Disabled Pet Farm")
        workspace.StaticMap.Park.BoredAilmentTarget.Size = Vector3.new(1,1,1)
        workspace.StaticMap.Park.BoredAilmentTarget.CanCollide = false 
        return
    end
end    
})


BabyFarm = Main:AddToggle({Name = "Baby Farm",Default=Settings.BabyFarm,Callback = function(t)
    Settings.BabyFarm = t 
    UpdateFile()
    if Settings.BabyFarm and MainSettings.ApplySettings and MainSettings.ApplyID == tostring(game.Players.LocalPlayer.UserId) then 
        game.TextChatService.TextChannels.RBXGeneral:SendAsync("BabyFarm Enabled")
    end
    if Settings.BabyFarm then 
        Status:Set("Enabled Baby Farm")
        task.spawn(function()
            while Settings.BabyFarm do task.wait() 
                if Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "char_wrapper") ~= nil then 
                    if Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "team") ~= "Babies" and Settings.BabyFarm and PS.LocalPlayer.Character and PS.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then 
                        if Settings.EventFarm or Settings.Autofarm then 
                            task.wait(.35)
                            RS.API:FindFirstChild("TeamAPI/ChooseTeam"):InvokeServer("Babies",true)
                        else
                            RS.API:FindFirstChild("TeamAPI/ChooseTeam"):InvokeServer("Babies",true)
                        end 
                        Settings.BabyFarming = true 
                    end
                    local Check = Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "char_wrapper")
                    if Check and Check.ailments_monitor and Check.ailments_monitor.ailments and Settings.BabyFarm then 
                        for _,v in pairs(Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "char_wrapper").ailments_monitor.ailments) do 
                            for x,d in pairs(v) do 
                                if Settings.BabyFarm and table.find(AilmentsTable, tostring(d)) and Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "char_wrapper") and Fsys("ClientData").get_server(game:GetService("Players").LocalPlayer, "char_wrapper").ailments_monitor then 
                                    RS.API["MonitorAPI/AddRate"]:InvokeServer(tostring(d),100) 
                                    Settings.BabyFarming = true 
                                    break
                                end
                            end
                            Settings.BabyFarming = false 
                        end
                        Settings.BabyFarming = false 
                    end
                end
                Settings.BabyFarming = false 
            end
        end)
    elseif Status and Pet_Status and not Settings.BabyFarm then 
        Status:Set("Disabled")
        Pet_Status:Set("Disabled")
        return
    end
end 
})


local Fsys = require(game.ReplicatedStorage:WaitForChild("Fsys")).load

local function rename(remotename,hashedremote)
    hashedremote.Name = remotename
end
table.foreach(getupvalue(Fsys("RouterClient").init,4),rename)


if game:GetService("ReplicatedStorage").SharedModules.ContentPacks:FindFirstChild("Lures2023") then 
    Main:AddToggle({Name = "Auto Lure",Default=Settings.EventFarm,Callback = function(t)
        Settings.EventFarm = t 
        task.spawn(function()
                if not GetFurniture("Lures2023NormalLure") and Settings.EventFarm and hasEnoughMoney(750) then 
                    local args = {
                        [1] = {
                            [1] = {
                                ["properties"] = {
                                    ["cframe"] = CFrame.new(2, 0, -19.39990234375) * CFrame.Angles(-0, 8.742277657347586e-08, 3.82137093032941e-15)
                                },
                                ["kind"] = "lures_2023_normal_lure"
                            }
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").API:FindFirstChild("HousingAPI/BuyFurnitures"):InvokeServer(unpack(args))                    
                elseif Settings.EventFarm and not hasEnoughMoney(750) and not GetFurniture("Lures2023NormalLure") then 
                    Library:MakeNotification({
                        Name = "Eazvy Hub - Error",
                        Content = "You do not have a Lure and not enough money to purchase one. Price: 750",
                        Image = "rbxassetid://161551681",
                        Time = 3
                    })
                end 
                function GetTemplateText()
                    for i,v in pairs(game.Players.LocalPlayer.PlayerGui.InteractionsApp.BasicSelects:GetChildren()) do 
                        if v:FindFirstChild("TextLabel") and (v.TextLabel.Text == "Collect Reward" or v.TextLabel.Text == "[PlaceholderText]") and v.TextLabel:FindFirstChild("FragmentHolder") and v.TextLabel.FragmentHolder:FindFirstChildOfClass("Frame") and Settings.EventFarm then 
                            return false 
                        end
                        if v:FindFirstChild("TextLabel") and v.TextLabel.Text == "Collect Reward" or v:FindFirstChild("TextLabel") and v.TextLabel.Text == "[PlaceholderText]" and Settings.EventFarm then
                           return true 
                        end 
                    end
                    return false 
                end 
                Lure = GetFurniture("Lures2023NormalLure")
                ClaimedAlready = false 
                while Settings.EventFarm do task.wait()
                    NewData = Data.get_data()[tostring(PS.LocalPlayer)]
                    if GetTemplateText() and Settings.EventFarm then 
                        for i,v in pairs(NewData.inventory.food) do 
                            if Settings.EventFarm and GetTemplateText() and v.kind == "lures_2023_flame_swirl_pie" and GetTemplateText() or v.kind == "lures_2023_campfire_cookies" or v.kind == "lures_2023_campfire_cookies_liveops" and GetTemplateText() and not ClaimedAlready and GetTemplateText() and Settings.EventFarm then 
                                if not GetTemplateText() then break end 
                                ClaimedAlready = true 
                                RS.API:FindFirstChild("ToolAPI/Equip"):InvokeServer(v.unique)
                                task.wait(.15)
                                local args = {
                                    [1] = game:GetService("Players").LocalPlayer,
                                    [2] = Lure,
                                    [3] = "UseBlock",
                                    [4] = {
                                        ["bait_unique"] = v.unique 
                                    },
                                    [5] = game:GetService("Players").LocalPlayer.Character
                                }
                                
                                game:GetService("ReplicatedStorage").API:FindFirstChild("HousingAPI/ActivateFurniture"):InvokeServer(unpack(args))  
                                Text = "Flame Swirl Pie"
                                if v.kind == "lures_2023_campfire_cookies_liveops" then 
                                    Text = "Campfire Cookies"
                                end
                                Library:MakeNotification({
                                    Name = "Eazvy Hub - Success",
                                    Content = "Placed " .. Text .. " Bait on Lure",
                                    Image = "rbxassetid://4914902889",
                                    Time = 1.4
                                })
                                RS.API:FindFirstChild("ToolAPI/Unequip"):InvokeServer(v.unique)
                                break 
                            end 
                        end
                        task.wait(1.5)
                        ClaimedAlready = false  
                        game:GetService("ReplicatedStorage").API["ToolAPI/UnequipAll"]:FireServer()
                    end
                    if GetTemplateText() and Settings.EventFarm then 
                        task.spawn(function()
                            local args = {
                                [1] = game:GetService("Players").LocalPlayer,
                                [2] = Lure,
                                [3] = "UseBlock",
                                [4] = false,
                                [5] = game:GetService("Players").LocalPlayer.Character
                            }
                            
                            game:GetService("ReplicatedStorage").API:FindFirstChild("HousingAPI/ActivateFurniture"):InvokeServer(unpack(args))
                            Library:MakeNotification({
                                Name = "Eazvy Hub - Success",
                                Content = "Claimed Bait from Lure",
                                Image = "rbxassetid://4914902889",
                                Time = 1.4
                            })
                        end)
                    end    
                end                          
        end)
    end})
end 


local Player = game.Players.LocalPlayer 
function GetCurrentVehicle()
    return Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character.Humanoid.SeatPart and Player.Character.Humanoid.SeatPart.Parent
end


function TP(instance, cframe)
    instance:SetPrimaryPartCFrame(cframe)
end

function VelocityTP(instance, cframe)
    local Car = instance
    local BodyGyro = Instance.new("BodyGyro", Car.PrimaryPart)
    BodyGyro.P = 5000
    BodyGyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
    BodyGyro.CFrame = Car.PrimaryPart.CFrame
    local BodyVelocity = Instance.new("BodyVelocity", Car.PrimaryPart)
    BodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
    BodyVelocity.Velocity = CFrame.new(Car.PrimaryPart.Position, cframe.p).LookVector * 180  
    wait((Car.PrimaryPart.Position - cframe.p).Magnitude / 180)
    BodyVelocity.Velocity = Vector3.new()*
    wait(0.1)
    BodyVelocity:Destroy()
    BodyGyro:Destroy()
end



local SortPet = Main:AddDropdown({Name = "Sort (Pet-Dropdown)",Default="",Options={"Mega and Neon", "Mega Neon", "Neon", "Fly & Ride", "Fly", "Ride", "Age"},Callback = function(s)
    local Pets = {}
    NewData = Data.get_data()[tostring(game.Players.LocalPlayer)]
    for i,v in pairs(NewData.inventory.pets) do 
        Kind = string.gsub(GetPetName(v.kind) or v.kind,"%p_-%a",string.upper)
        if s == "Roleplay Name" and v.properties.rp_name ~= "" then 
            table.insert(Pets, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old")))
        elseif v.properties.neon or v.properties.mega_neon and s == "Mega and Neon" then
            table.insert(Pets, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old")))
        elseif v.properties.mega_neon and s == "Mega Neon" then 
            table.insert(Pets, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old")))
        elseif v.properties.neon and s == "Neon" then 
            table.insert(Pets, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old")))
        elseif v.properties.flyable and s == "Fly" then 
            table.insert(Pets, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old")))
        elseif v.properties.rideable and s == "Ride" then 
            table.insert(Pets, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old")))
        elseif v.properties.flyable and v.properties.rideable and s == "Fly & Ride Only" then 
            table.insert(Pets, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old")))
        end
    end
    CurrentPets:Refresh(Pets, true)
end    
})




Main:AddSection({
    Name = "// "..Wheel.." Autofarm Settings //"
})


FarmAllPets = Main:AddToggle({Name="Farm All Pets", Default=Settings.FarmAllPets, Callback=function(t)
    Settings.FarmAllPets = t 
    if Settings.FarmAllPets and MainSettings.ApplySettings and MainSettings.ApplyID == tostring(game.Players.LocalPlayer.UserId) then 
        game.TextChatService.TextChannels.RBXGeneral:SendAsync("FarmAllPets Enabled")
    end
    UpdateFile()
end})


Main:AddToggle({Name="Auto Use New", Default=Settings.AutoUseNew, Callback=function(t)
    Settings.AutoUseNew = t
    UpdateFile()
end})  


local AutoQuests = Main:AddToggle({Name="Auto Quests", Default=Settings.AutoQuests, Callback=function(t)
    Settings.AutoQuests = t 
    UpdateFile()
    if Settings.AutoQuests and MainSettings.ApplySettings and MainSettings.ApplyID == tostring(game.Players.LocalPlayer.UserId) then 
        game.TextChatService.TextChannels.RBXGeneral:SendAsync("AutoQuests Enabled")
    end
    if Settings.AutoQuests then 
        task.spawn(function()
            for i=1,6 do task.wait()
                RS.API["DailyLoginAPI/ClaimDailyReward"]:InvokeServer()
                NewClaim()
                task.wait()
                NewTask() 
            end
        end)
    end
end 
})

local AutoRewards = Main:AddToggle({Name="Auto Daily", Default=Settings.AutoRewards, Callback=function(t)
    Settings.AutoRewards = t 
    UpdateFile()
    if Settings.AutoRewards and MainSettings.ApplySettings and MainSettings.ApplyID == tostring(game.Players.LocalPlayer.UserId) then 
        game.TextChatService.TextChannels.RBXGeneral:SendAsync("AutoRewards Enabled")
    end
    if Settings.AutoRewards then 
        GrabDailyReward()
    end
end 
})


-- Main:AddToggle({Name="Use Same Pet", Default=Settings.AutoFullGrown, Callback=function(t)
--     Settings.UseSamePet = t
--     UpdateFile()
-- end})  


local ExcludeEggs = Main:AddToggle({Name="Exclude Eggs", Default=Settings.ExcludeEggs, Callback=function(t)
    Settings.ExcludeEggs = t 
    if Settings.ExcludeEggs and MainSettings.ApplySettings and MainSettings.ApplyID == tostring(game.Players.LocalPlayer.UserId) then 
        game.TextChatService.TextChannels.RBXGeneral:SendAsync("ExcludeEggs Enabled")
    end
    UpdateFile()
end})


Main:AddToggle({Name="Display Autofarm Status (Pet/Yourself)", Default=Settings.DisplayStatusOnPet, Callback=function(t)
    Settings.DisplayStatusOnPet = t 
    UpdateFile()
end})



Main:AddSection({
    Name = "// " .. tostring(utf8.char(0x0001F30C)) .. " Pet Selection Tab//"
})

local PetSelect = Main:AddDropdown({Name = "Pet Selection",Default=PetSelection,Options=PetSelectionTable,Callback = function(s)
    if not table.find(PetSelection, tostring(s)) then 
        table.insert(PetSelection, tostring(s))
    end
end})

FarmSelected = Main:AddToggle({Name="Farm Selected Pets", Default=Settings.FarmSelected, Callback=function(t)
    Settings.FarmSelected = t 
    if Settings.FarmSelected and MainSettings.ApplySettings and MainSettings.ApplyID == tostring(game.Players.LocalPlayer.UserId) then 
        game.TextChatService.TextChannels.RBXGeneral:SendAsync("FarmSelected Enabled")
    end
    UpdateFile()
end})


Main:AddButton({Name="Clear Pet Selection", Callback=function()
    table.clear(PetSelection)
end})

Main:AddButton({Name="Refresh Pet Dropdown", Callback=function()
    local Pets = {}
    local New_Data = Data.get_data()[tostring(PS.LocalPlayer)]
    for i,v in pairs(New_Data.inventory.pets) do 
        Kind = string.gsub(GetPetName(v.kind) or v.kind,"%p_-%a",string.upper)
        if v.properties.rp_name and v.properties.rp_name ~= "" and not table.find(Pets, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old"))) and v.kind ~= "practice_dog" then 
            table.insert(Pets, (tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " (" .. tostring(v.properties.rp_name) .. ") " .. " - " .. v.properties.age .. " Years Old")))
        elseif not v.properties.rp_name and not table.find(Pets, tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. v.properties.age .. " Years Old")) and v.kind ~= "practice_dog" then
            table.insert(Pets, tostring(string.gsub(string.gsub(Kind, "_", " "), "^%l", function(c) return string.upper(c) end) .. " - " .. v.properties.age .. " Years Old"))
        end
    end
    CurrentPets:Refresh(Pets, true)
end})


local function GetLocation(emote)
    for i,v in pairs(Teleports) do 
      upper_string = string.upper(i)
      upper_emote = string.upper(emote)
      if upper_string == upper_emote then 
         return i 
      end
     end
    for i,v in pairs(Teleports) do 
        lower_string = string.lower(i)
        lower_emote = string.lower(emote)
        if string.find(i, emote) or string.find(lower_string, lower_emote) then 
            return i 
        end
    end
end



local LP = Window:MakeTab({
	Name = "LocalPlayer",
	Icon = "rbxassetid://3609827161",
	PremiumOnly = false
})


local House = Window:MakeTab({
	Name = "House",
	Icon = "rbxassetid://9204970314",
	PremiumOnly = false
})


local Server = Window:MakeTab({
	Name = "Settings",
	Icon = "rbxassetid://8382597378",
	PremiumOnly = false
})


House:AddSection({
    Name = "// Trade //"
})

AutoAcceptAll = House:AddToggle({Name="Auto Accept All",Default = false,Callback = function(t)
    AutoAccept = t 
    if Settings.Pet_Name == "None" then return end 
    if Settings.PlayerName == "None" then return end 
    while AutoAccept == true do wait() 
        RS.API["TradeAPI/AcceptOrDeclineTradeRequest"]:InvokeServer(Settings.PlayerName, true)
        RS.API["TradeAPI/AcceptNegotiation"]:FireServer()
        RS.API["TradeAPI/ConfirmTrade"]:FireServer()
    end
end})
 

-- --Functions

function Format(Int)
	return string.format("%2i", Int)
end


function convertToHMS(Seconds)
	local Minutes = (Seconds - Seconds%60)/60
	Seconds = Seconds - Minutes*60
	local Hours = (Minutes - Minutes%60)/60
	Minutes = Minutes - Hours*60
	return Format(Hours).." Hours and".. Format(Minutes).." Minutes and "..Format(Seconds) .. " seconds."
end



function comma_value(amount)
    local formatted = amount
    while true do  
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
        if (k==0) then
            break
        end
    end
    return formatted
end
    
    
local httprequest = (syn and syn.request) or http and http.request or http_request or (fluxus and fluxus.request) or request
local httpservice = game:GetService('HttpService')



LP:AddSection({
    Name = "// LocalPlayer Extra //"
})


LP:AddButton({Name="Finish Tutorial", Callback=function()
    local Tutorial_Statuses = {"Avatar Tutorial Started", "Avatar Editor Opened", "Avatar Editor Closed", "Housing Tutorial Started", "Housing Editor Opened", "House Exited", "Nursery Tutorial Started", "Nursery Entered", "Started Egg Received", "Quest Tutorial Started", "Quest App Opened", "Quest App Closed", "Tutorial Ailment Spawned"}
    Main_Menu.run_tutorial = function() return end 
    Main_Menu.run_housing_tutorial = function() return end 
    Main_Menu.name_pet_mini_tutorial = function() return end
    Main_Menu.run_avatar_tutorial = function() return end
    Main_Menu.run_nursery_tutorial = function() return end 
    Main_Menu.get_should_skip_tutorial = function() return true end 
    require(game:GetService("ReplicatedStorage").SharedModules.PolicyHelper).is_external_link_allowed = function() return false end 
    Main_Menu.has_spoken_with_sir_woofington = function() return true end 
    Main_Menu.is_legacy_housing_tutorial_done = function() return true end 
    RS.API:FindFirstChild("TeamAPI/ChooseTeam"):InvokeServer("Parents",true)
    for i,v in pairs(Tutorial_Statuses) do task.wait()
        RS.API["LegacyTutorialAPI/StashTutorialStatus"]:FireServer(v)
        RS.API["LegacyTutorialAPI/MarkTutorialCompleted"]:FireServer()
    end
    RS.API["LegacyTutorialAPI/EquipTutorialEgg"]:FireServer()
    -- RS.API["LegacyTutorialAPI/AddHungryAilmentToTutorialEgg"]:FireServer()
end})

LP:AddButton({Name="Get Trade Badge", Callback=function()
    Fsys("RouterClient").get("SettingsAPI/SetBooleanFlag"):FireServer("has_talked_to_trade_quest_npc", true)
    task.wait()
    Fsys("RouterClient").get("TradeAPI/BeginQuiz"):FireServer()
    task.wait(1)
    for i, v in pairs(Fsys('ClientData').get("trade_license_quiz_manager")["quiz"]) do
        Fsys("RouterClient").get("TradeAPI/AnswerQuizQuestion"):FireServer(v["answer"])
    end
end})




local Bind = Server:AddBind({Name = "Toggle UI",Default=Enum.KeyCode.Q,Hold=false,Callback = function(s)
	if game:GetService("CoreGui").Orion.Enabled then
        game:GetService("CoreGui").Orion.Enabled = false
    else
        game:GetService("CoreGui").Orion.Enabled = true
    end   
end  
})

local enabledMax = true 

BoostPerformance = Server:AddToggle({Name="Boost Performance", Default=Settings.BoostPerformance, Callback=function(t)
    Settings.BoostPerformance = t 
    UpdateFile()
    if Settings.BoostPerformance and MainSettings.ApplySettings and MainSettings.ApplyID == tostring(game.Players.LocalPlayer.UserId) then 
        game.TextChatService.TextChannels.RBXGeneral:SendAsync("BoostPerformance Enabled")
    end
    if CheckMap() and Settings.BoostPerformance then 
        local CurrMap = game.Workspace.Interiors:WaitForChild(tostring(game.Workspace.Interiors:FindFirstChildWhichIsA("Model")))
        
        for i,v in pairs(workspace:GetDescendants()) do 
            if v.Name == "Balloon" then 
                v:Destroy()
            elseif v.Name == "Trampolines" then 
                v:Destroy()
            elseif v.Name == "SwingSets" then 
                v:Destroy()
            elseif v.Name == "PlaygroundSlide" then 
                v:Destroy()
            elseif v.Name == "Roundabout" then 
                v:Destroy()
            elseif v.Name == "Seesaw" then 
                v:Destroy()
            elseif v.Name == "LodgeDoor" then 
                v:Destroy()
            elseif v.Name == "LodgeFloor" then 
                v:Destroy()
            elseif v.Name == "Lantern" then 
                v:Destroy()
            elseif v.Name == "SpikyTree" then 
                v:Destroy()
            elseif v.Name == "Trim" then 
                v:Destroy()
            elseif v.Name == "Stairs" then 
                v:Destroy()
            elseif v.Name == "Rope" then 
                v:Destroy()
            elseif v.Name == "ParkStage" then 
                v:Destroy()
            elseif v.Name == "Trees" then 
                v:Destroy()
            elseif v.Name == "Bamboo" then 
                v:Destroy()
            elseif v.Name == "Lanterns" then 
                v:Destroy()
            elseif v.Name == "Statues" then 
                v:Destroy()
            elseif v.Name == "Wood" then
                 v:Destroy()
            elseif v.Name == "Rocks" then 
                v:Destroy()
            elseif v.Name == "Umbrella" then 
                v:Destroy()
            elseif v.Name == "VaporParticles" then 
                v:Destroy()
            elseif v.Name == "HugeRock" then 
                v:Destroy()
            elseif v.Name == "Waterfall" then 
                v:Destroy()
            elseif v.Name == "Pipe" then 
                v:Destroy()
            elseif v.Name == "Red Panda Statue" then 
                v:Destroy()
            elseif v.Name == "Mountains" then 
                v:Destroy()
            elseif v.Name == "Furniture" then 
                v:Destroy()
            elseif v.Name == "Props" then 
                for i,v in pairs(v:GetChildren()) do 
                    if v.Name ~= "Overhang" then 
                        if v.Name == "Tunnel" and v:FindFirstChild("TunnelSigns") then 
                            v:FindFirstChild("TunnelSigns"):Destroy()
                        elseif v:FindFirstChild("NeighborhoodSign") then 
                            v:FindFirstChild("NeighborhoodSign"):Destroy()
                        end
                        if v.Name ~= "Tunnel" then 
                            v:Destroy()
                        elseif v:FindFirstChild("RoadTrim") then 
                            v:FindFirstChild("RoadTrim"):Destroy()
                        elseif v:FindFirstChild("Dirt") then 
                            v:FindFirstChild("Dirty"):Destroy()
                        elseif v:FindFirstChild("Collision") then 
                            v:FindFirstChild("Collision"):Destroy()
                        end
                    end
                end
            elseif v.Name == "Road" then 
                v:Destroy()
            elseif v.Name == "Bridges" then
                 v:Destroy()
            elseif v.Name == "RiverEdge" then
                v:Destroy()
            elseif v.Name == "SimpleRoundLeaves" then 
                v:Destroy()
            elseif v.Name == "DeadTree" then 
                v:Destroy()
            elseif v.Name == "WoodenWalkway" then 
                v:Destroy()
            end
        end 
        workspace:WaitForChild("Terrain")
        workspace.Terrain.WaterReflectance = 0
        workspace.Terrain.WaterWaveSize = 0
        workspace.Terrain.WaterWaveSpeed = 0
        workspace.Terrain.WaterTransparency = 0
        game.Lighting.GlobalShadows = false
        settings().Rendering.QualityLevel = 1
        require(game:GetService("ReplicatedStorage").ClientModules.CharacterHider).hide_other_characters_in_location(TeleportModule.get_current_location().destination_id)
        for i,v in pairs(require(game:GetService("ReplicatedStorage").ClientModules.Core.WeatherClient.WeatherClient)) do 
            if type(v) == "function" then 
                v = function() return end 
            end
        end        
    end
end})


Server:AddSection({
    Name = "// Settings //"
})


Server:AddButton({Name = "Reset Settings",Callback = function()
    for i,v in pairs(Settings) do 
        if v == true then 
           v = false 
        end 
    end 
    UpdateFile()
end    
}) 

   
game:GetService("Players").LocalPlayer.PlayerGui.BucksIndicatorApp.CurrencyIndicator.Container.Amount:GetPropertyChangedSignal("Text"):Connect(function()
    if not Settings.MaxPerformance then 
        local Amount_Earned = tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get("money")) - Previous_Bux
        -- local Candy_Earned
        -- if AltCurrencyName ~= nil then 
        --     Candy_Earned = tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get(AltCurrencyName)) - Previous_Currency
        --     if tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get("money")) < Previous_Bux or tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get(AltCurrencyName)) < Previous_Currency then 
        --         return 
        --     end
        -- end
        local Text
        if AltCurrencyEnabled then 
            Text = "Bucks Earned: " .. tostring(comma_value(Amount_Earned)) .. " | " .. tostring(AltCurrencyN) .. " Earned: " .. tostring(comma_value(Candy_Earned))
        else 
            Text = "Bucks Earned: " .. tostring(comma_value(Amount_Earned))
        end
        if Bucks_Earned then 
            Bucks_Earned:Set(Text)
        end 
        if Settings.SendEarned and tick() - (LastNotif or 0) > Settings.WebhookDelay * 150 then
            LastNotif = tick()
            local Previous_Currency = tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get(tostring(AltCurrencyName)))
            Data = {
                content = nil,
                embeds = { {
                description = "**Eazvy Hub - Autofarm Status:**",
                color = 4132863,
                fields = { 
                    {
                    name = "**Username:**",
                    value = tostring(game:GetService("Players").LocalPlayer.Name),
                    inline = true
                    },
                    {
                    name = "**Earned Bucks:**",
                    value = tostring(tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get("money")) - Previous_Bux),
                    inline = true
                }, 
                {
                    name = "**Earned Candy:**",
                    value = tostring(tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get(AltCurrencyName)) - Previous_Currency),
                    inline = true
                }, {
                    name = "**Pet Equipped:**",
                    value = tostring(Settings.PetName),
                    inline = true
                }},
                thumbnail = {
                    url = "https://www.roblox.com/headshot-thumbnail/image?userId="..tostring(game:GetService("Players").LocalPlayer.UserId).."&width=420&height=420&format=png"
                }
                } },
                footer = {
                text = "Made by Eazvy - Eazvy Hub"
                },
                username = "Eazvy Hub - Notifications",
                avatar_url = "https://www.clipartmax.com/png/middle/291-2914856_eye-outline-free-icon-transparent-background-eye-icon.png",
                attachments = { }
            }
            httprequest({
                Url = tostring(Settings.Webhook),
                Method = "POST",
                Headers = { ["Content-Type"] =  "application/json"},
                Body = game:GetService('HttpService'):JSONEncode(data)
            })
        end
    end
end)


if AltCurrencyEnabled and not Settings.MaxPerformance  then 
    game:GetService("Players").LocalPlayer.PlayerGui.AltCurrencyIndicatorApp.CurrencyIndicator.Container.Amount:GetPropertyChangedSignal("Text"):Connect(function()
        if tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get("money")) < Previous_Bux or tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get(AltCurrencyName)) < Previous_Currency or Settings.MaxPerformance then 
            return 
        end
        local Amount_Earned = tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get(AltCurrencyName)) - Previous_Currency
        local Text 
        if Bucks_Earned.Text == nil then 
            Text = tostring("Bucks Earned: 0")
        else 
            Text = "Bucks Earned: " .. tostring(Bucks_Earned.Text)
        end
        Bucks_Earned:Set(tostring(Text) .. " | " .. tostring(AltCurrencyN) .. " Earned: " .. comma_value(tostring(Amount_Earned)))
        if Settings.SendEarned and tick() - (LastNotif or 0) > Settings.WebhookDelay then
            LastNotif = tick()
            local Previous_Currency = tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get(tostring(AltCurrencyName)))
            Data = {
                content = nil,
                embeds = { {
                description = "**Eazvy Hub - Autofarm Status:**",
                color = 4132863,
                fields = { 
                    {
                    name = "Username:",
                    value = tostring(game:GetService("Players").LocalPlayer.Name),
                    inline = true
                    },
                    {
                    name = "**Earned Bucks:**",
                    value = tostring(tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get("money")) - Previous_Bux),
                    inline = true
                }, 
                {
                    name = "**Earned Candy:**",
                    value = tostring(tonumber(require(game:service'ReplicatedStorage'.Fsys).load("ClientData").get(AltCurrencyName)) - Previous_Currency),
                    inline = true
                }, {
                    name = "**Pet Equipped:**",
                    value = tostring(Settings.PetName),
                    inline = true
                }},
                thumbnail = {
                    url = "https://www.roblox.com/headshot-thumbnail/image?userId="..tostring(game:GetService("Players").LocalPlayer.UserId).."&width=420&height=420&format=png"
                }
                } },
                footer = {
                text = "Made by Eazvy - Eazvy Hub"
                },
                username = "Eazvy Hub - Notifications",
                avatar_url = "https://www.clipartmax.com/png/middle/291-2914856_eye-outline-free-icon-transparent-background-eye-icon.png",
                attachments = { }
            }
            httprequest({
                Url = tostring(Settings.Webhook),
                Method = "POST",
                Headers = { ["Content-Type"] =  "application/json"},
                Body = game:GetService('HttpService'):JSONEncode(data)
            })
        end
    end)
end


workspace.Interiors.ChildAdded:Connect(function(v)
    if CheckMap() and Settings.BoostPerformance then 
        local CurrMap = game.Workspace.Interiors:WaitForChild(tostring(game.Workspace.Interiors:FindFirstChildWhichIsA("Model")))
        for i,v in pairs(workspace:GetDescendants()) do 
            if v.Name == "Balloon" then 
                v:Destroy()
            elseif v.Name == "PoolArea" then 
                v:Destroy()
            -- elseif v.Name == "MapForecast" then 
            --     v:Destroy()
            elseif v.Name == "Trampolines" then 
                v:Destroy()
            elseif v.Name == "SwingSets" then 
                v:Destroy()
            elseif v.Name == "PlaygroundSlide" then 
                v:Destroy()
            elseif v.Name == "Roundabout" then 
                v:Destroy()
            elseif v.Name == "Seesaw" then 
                v:Destroy()
            elseif v.Name == "LodgeDoor" then 
                v:Destroy()
            elseif v.Name == "LodgeFloor" then 
                v:Destroy()
            elseif v.Name == "Lantern" then 
                v:Destroy()
            elseif v.Name == "SpikyTree" then 
                v:Destroy()
            elseif v.Name == "Trim" then 
                v:Destroy()
            elseif v.Name == "Stairs" then 
                v:Destroy()
            elseif v.Name == "Rope" then 
                v:Destroy()
            elseif v.Name == "ParkStage" then 
                v:Destroy()
            elseif v.Name == "Trees" then 
                v:Destroy()
            elseif v.Name == "Bamboo" then 
                v:Destroy()
            elseif v.Name == "Lanterns" then 
                v:Destroy()
            elseif v.Name == "Statues" then 
                v:Destroy()
            elseif v.Name == "Wood" then
                 v:Destroy()
            elseif v.Name == "Rocks" then 
                v:Destroy()
            elseif v.Name == "Umbrella" then 
                v:Destroy()
            elseif v.Name == "VaporParticles" then 
                v:Destroy()
            elseif v.Name == "HugeRock" then 
                v:Destroy()
            elseif v.Name == "Waterfall" then 
                v:Destroy()
            elseif v.Name == "Pipe" then 
                v:Destroy()
            elseif v.Name == "Red Panda Statue" then 
                v:Destroy()
            elseif v.Name == "Mountains" then 
                v:Destroy()
            elseif v.Name == "Furniture" then 
                v:Destroy()
            elseif v.Name == "Props" then 
                for i,v in pairs(v:GetChildren()) do 
                    if v.Name ~= "Overhang" then 
                        if v.Name == "Tunnel" and v:FindFirstChild("TunnelSigns") then 
                            v:FindFirstChild("TunnelSigns"):Destroy()
                        elseif v:FindFirstChild("NeighborhoodSign") then 
                            v:FindFirstChild("NeighborhoodSign"):Destroy()
                        end
                        if v.Name ~= "Tunnel" then 
                            v:Destroy()
                        elseif v:FindFirstChild("RoadTrim") then 
                            v:FindFirstChild("RoadTrim"):Destroy()
                        elseif v:FindFirstChild("Dirt") then 
                            v:FindFirstChild("Dirty"):Destroy()
                        elseif v:FindFirstChild("Collision") then 
                            v:FindFirstChild("Collision"):Destroy()
                        end
                    end
                end
            elseif v.Name == "Road" then 
                v:Destroy()
            elseif v.Name == "Bridges" then
                 v:Destroy()
            elseif v.Name == "RiverEdge" then
                v:Destroy()
            elseif v.Name == "SimpleRoundLeaves" then 
                v:Destroy()
            elseif v.Name == "DeadTree" then 
                v:Destroy()
            end
        end 
        workspace:WaitForChild("Terrain")
        workspace.Terrain.WaterReflectance = 0
        workspace.Terrain.WaterWaveSize = 0
        workspace.Terrain.WaterWaveSpeed = 0
        workspace.Terrain.WaterTransparency = 0
        game.Lighting.GlobalShadows = false
        settings().Rendering.QualityLevel = 1
    elseif workspace.Interiors:FindFirstChild("Neighborhood/Default") and Settings.BoostPerformance then 
        for i,v in pairs(workspace.Interiors["Neighborhood/Default"].Static:GetChildren()) do 
            if v.Name ~= "Terrain" and v.Name ~= "Props" then 
                v:Destroy()
            elseif v.Name == "Terrain" and v:FindFirstChild("Mountains") then 
                v:FindFirstChild("Mountains"):Destroy()
            elseif v.Name == "Terrain" and v:FindFirstChild("Road") then 
                for i,v in pairs(v:FindFirstChild("Road"):GetChildren()) do 
                    if v.Name == "RoadTrim" then 
                        v:Destroy()
                    end
                end
            end
        end
        for i,v in pairs(workspace.HouseExteriors:GetChildren()) do 
            if v:FindFirstChild("center_map_plot") then 
                v:FindFirstChild("center_map_plot"):Destroy()
            elseif v:FindFirstChild("supermarket_plot") then 
                v:FindFirstChild("supermarket_plot"):Destroy()
            end
            if v:IsA("Folder") and v:FindFirstChildOfClass("Model") then 
                if v:FindFirstChildOfClass("Model"):FindFirstChild("Mailbox") then 
                    v:FindFirstChildOfClass("Model"):FindFirstChild("Mailbox"):Destroy()
                end
                if v:FindFirstChildOfClass("Model"):FindFirstChild("DailyCounter") then 
                    v:FindFirstChildOfClass("Model"):FindFirstChild("DailyCounter"):Destroy()
                end
                if v:FindFirstChildOfClass("Model"):FindFirstChild("Colorable") then 
                    v:FindFirstChildOfClass("Model"):FindFirstChild("Colorable"):Destroy()
                end
            end
        end       
        workspace:WaitForChild("Terrain")
        workspace.Terrain.WaterReflectance = 0
        workspace.Terrain.WaterWaveSize = 0
        workspace.Terrain.WaterWaveSpeed = 0
        workspace.Terrain.WaterTransparency = 0
        game.Lighting.GlobalShadows = false
        settings().Rendering.QualityLevel = 1 
        require(game:GetService("ReplicatedStorage").ClientModules.CharacterHider).hide_other_characters_in_location(TeleportModule.get_current_location().destination_id)
    end
end)

function CheckMinigames() 
    for _,v in pairs(workspace.StaticMap:GetChildren()) do 
        if v:IsA("Folder") and v:FindFirstChild("is_game_active") and v.is_game_active.Value then 
           return true 
        end 
    end 
    return false 
end 


blockedRemotes = {
    "PetAPI/ReplicateActiveReactions",
    "PetAPI/ReplicateActivePerformances",
    "logUserExitState",
    "setMemory",
    "setMisc",
    "FriendsAPI/FriendRemoved",
    "LocationAPI/GetCharacterRootCFrame",
    "HousingAPI/PushFurnitureChanges",
    "JournalAPI/CommitCollection",
    "ErrorReportAPI/SendUniqueError",
    "getTime"
}

function isRemoteBlocked(remoteName)
    for _, name in ipairs(blockedRemotes) do
        if name == remoteName then
            return true
        end
    end
    return false
end

local OldNameCall = nil
OldNameCall = hookmetamethod(game, "__namecall", function(...)
    local Args = {...}
    local Self = Args[1]
    if (getnamecallmethod() == "FireServer" or getnamecallmethod() == "InvokeServer") and isRemoteBlocked(tostring(Self)) and Settings.MaxPerformance then
        return
    end
    return OldNameCall(...)
end)


local OldNameCall = nil
OldNameCall = hookmetamethod(game, "__namecall", function(...)
    local Args = {...}
    local Self = Args[1]
    if not Settings.MaxPerformance and getnamecallmethod()=="FireServer" and tostring(Self)=="ToolAPI/UnequipAll" and Settings.EventFarm and Settings.Autofarm and CheckMinigames() or getnamecallmethod()=="InvokeServer" and tostring(Self)=="ToolAPI/UnequipAll" and CheckMinigames() and  Settings.EventFarm and Settings.Autofarm or getnamecallmethod()=="InvokeServer" and tostring(Self)=="ToolAPI/Unequip" and Settings.EventFarm and Settings.Autofarm and CheckMinigames() or getnamecallmethod()=="InvokeServer" and tostring(Self)=="HousingAPI/UnsubscribeFromHouse" and Settings.Autofarm or getnamecallmethod()=="InvokeServer" and tostring(Self)=="PetAPI/ExitFurnitureUseStates" and Settings.Autofarm or getnamecallmethod() =="InvokeServer" and tostring(Self) == "PetAPI/ExitFurnitureUseStates" and Settings.Autofarm then
        return
    end
    return OldNameCall(...)
end)


workspace.ChildAdded:Connect(function(child)
    if Settings.MaxPerformance then
        if child:IsA("Model") and child ~= game.Players.LocalPlayer.Character then
            local humanoidRootPart = child:FindFirstChild("HumanoidRootPart")
            local head = child:FindFirstChild("Head")
            local humanoid = child:FindFirstChildOfClass("Humanoid")
            
            if humanoidRootPart or head or humanoid then
                child:Destroy()
            end
        end
    end
end)

--print("no crash yet :v")

game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp:GetPropertyChangedSignal("Enabled"):Connect(function()
    if game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Enabled then
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Frame.Body.Buttons:GetChildren()) do 
            if v.Name == "ClaimButton" then
               pcall(function()
                    firesignal(v.MouseButton1Click)
                    if Settings.AutoRewards then 
                        GrabDailyReward()
                    end
                end)
            end
       end 
    end
end)


local AntiSpam = {}
local SpamDetected = false 

function isStringEnabled(text)
    local lowerText = text:lower()
    local isEnabled = lowerText:find("enabled") ~= nil
    return isEnabled, lowerText
end


xd = {}


function DetectSpam(text)
    local repetitionThreshold = 3
    local consecutiveCharacters = 0
    local repeatedCharacterCount = 0
    local uniqueCharacterCount = 0
    local previousChar = ""
    local repeatedSegments = {}
  
    for char in text:gmatch(".") do
        if char == previousChar then
            consecutiveCharacters = consecutiveCharacters + 1
            if consecutiveCharacters >= repetitionThreshold then
                repeatedCharacterCount = repeatedCharacterCount + 1
                local segment = text:sub(-consecutiveCharacters)
                repeatedSegments[segment] = (repeatedSegments[segment] or 0) + 1
            end
        else
            consecutiveCharacters = 0
            uniqueCharacterCount = uniqueCharacterCount + 1
        end
      
        previousChar = char
    end
  
    local textLength = #text
    local repetitionRatio = repeatedCharacterCount / textLength
    local uniquenessRatio = uniqueCharacterCount / textLength
  

    local repetitionThresholdRatio = 0.3
    local uniquenessThresholdRatio = 0.5
    local repeatedSegmentThreshold = 2
  
    if repetitionRatio >= repetitionThresholdRatio or uniquenessRatio <= uniquenessThresholdRatio then
        for segment, count in pairs(repeatedSegments) do
            if count >= repeatedSegmentThreshold then
                return true
            end
        end
    end
  
    return false
end


AntiSpam = {}
messageCount = {}
blockDuration = 180 
blockedUsers = {} 
timeThreshold = 5

game.TextChatService.TextChannels.RBXGeneral.MessageReceived:Connect(function(message)
    textSource = tostring(message.TextSource)
    text = tostring(message.Text)

    SpamDetected = false

    if game:GetService("Players"):FindFirstChild(textSource) and Settings.ChatLogger and textSource ~= tostring(game:GetService("Players").LocalPlayer.Name) then
        if blockedUsers[textSource] and blockedUsers[textSource] > os.time() then
            return
        end

        if not AntiSpam[textSource] then
            AntiSpam[textSource] = {}
            messageCount[textSource] = {}
        end

        currentTime = os.time()
        lastMessageTime = messageCount[textSource][text]

        if not lastMessageTime or (currentTime - lastMessageTime) > timeThreshold then
            messageCount[textSource][text] = currentTime
        else
            blockedUsers[textSource] = currentTime + blockDuration
            SpamDetected = true
        end

        if not SpamDetected then
            game.TextChatService.TextChannels.RBXGeneral:SendAsync(string.upper(textSource) .. " | @" .. tostring(game:GetService("Players")[textSource].DisplayName) .. " said: " .. text)
        elseif SpamDetected and tick() - (LastNotif or 0) > 6 then
            LastNotif = tick()
            game.TextChatService.TextChannels.RBXGeneral:SendAsync(string.upper(textSource) .. " | @" .. tostring(game:GetService("Players")[textSource].DisplayName) .. " has been silenced for attempting to spam chat system.")
        end
    end
end)


if Settings.FPSCap and Settings.FPSCap ~= 60 and not Settings.MaxPerformance and setfpscap then 
    --setfpscap(Settings.FPSCap)
end 

gameIsloaded = true 

pcall(function() getgenv().EAZVY_LOADED = true end)
